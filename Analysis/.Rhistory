scale_y_continuous(expand = expansion(mult = c(0, 0)),
label = scientific_10,
breaks = plot_breaks,
limits = plot_range) +
labs(title = 'b', x = 'Stage', y = NULL) +
scale_color_manual(values = fill_color) +
theme_classic() +
theme(legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
panel.background = element_rect(fill = "transparent", color = "transparent"),
plot.background = element_rect(fill = "transparent", color = "transparent"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_blank())
remove(data, data_2022, data_2023,
plot_breaks, plot_range,
results, emm, pairs, pairs_summary)
# cn ----------------------------------------------------------------------
data <- df_raw |>
filter(Country == 'CN')
data_2023 <- df_clean |>
filter(Country == 'CN') |>
mutate(month = factor(Month,
levels = c(7:12, 1:6),
labels = 101:112),
month = as.integer(as.character(month))) |>
filter(stage == '2023 Jun onwards')
data_2022 <- df_clean |>
filter(Country == 'CN') |>
mutate(month = factor(Month,
levels = c(7:12, 1:6),
labels = 101:112),
month = as.integer(as.character(month))) |>
filter(stage != '2023 Jun onwards')
plot_breaks <- pretty(c(0, max(data$Cases)))
plot_range <- range(plot_breaks)
data$Year <- as.factor(data$Year)
data$Month <- as.factor(data$Month)
data$Stage <- factor(data$stage,
levels = unique(data$stage))
results <- lmer(Cases ~ Stage + (1|Month), data = filter(data, Stage != '2023 Jun onwards'))
emm <- emmeans(results, ~ Stage)
pairs <- pairs(emm)
pairs_summary <- summary(pairs, adjust = "bonferroni") |>
as.data.frame() |>
separate(contrast, c('stage1', 'stage2'), sep = ' \\- ') |>
rename('group1' = 'stage1',
'group2' = 'stage2') |>
mutate(y.position = plot_range[2] * 0.9,
p.value = ifelse(p.value < 0.001, '***', format(round(p.value, 3), nsmall = 3)))
print(pairs_summary)
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig4_visualization.R", echo=TRUE)
df_predict |>
mutate(diff = mean - observed) |>
group_by(country) |>
summarise(observed = sum(observed, na.rm = T),
mean = sum(mean, na.rm = T),
total = sum(diff, na.rm = T),
total_per = paste(100 * round(total / sum(mean, na.rm = T), 4), "%"))
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig4_visualization.R", echo=TRUE)
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig3_compare.R", echo=TRUE)
View(df_cn)
df_predict |>
mutate(diff = mean - observed) |>
group_by(country) |>
summarise(observed = sum(observed, na.rm = T),
mean = sum(mean, na.rm = T),
total = sum(diff, na.rm = T),
total_per = paste(100 * round(total / sum(mean, na.rm = T), 4), "%"))
View(df_uk)
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
# AU ----------------------------------------------------------------------
ts_train <- window(ts_au, start = c(2015, 1), end = c(2018, 12))
# sequence stationary test
adf_result <- adf.test(ts_train, alternative = 'stationary')
plot(adf_result)
adf_result
plot(adf_result)
# sequence stationary test
adf_result <- adf.test(ts_train, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_train, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_train, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
Cross
fig1
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
adf_result
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
# AU ----------------------------------------------------------------------
ts_train <- window(ts_au, start = c(2015, 1), end = c(2018, 12))
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_au, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_au, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig1
fig2
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
# AU ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_au, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_au, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
# validation
ts_train <- window(ts_au, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_au, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S2.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# CN ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_cn, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_cn, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_cn, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
# validation
ts_train <- window(ts_cn, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_cn, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S3.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# US ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_us, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_us, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_us, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
# validation
ts_train <- window(ts_us, start = 2015, end = 2019.5)
ts_test <- window(ts_us, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Weekly incidence')
ggsave('./appendix/S4.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# UK ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_uk, alternative = 'stationary')
# Cross-Correlation
fig1 <- autoplot(acf(ts_uk, plot = F), main = 'a')
fig2 <- autoplot(pacf(ts_uk, plot = F), main = 'b') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
# validation
ts_train <- window(ts_uk, start = 2015, end = 2019.5)
ts_test <- window(ts_uk, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S5.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_au, lag = 12, type = 'Ljung-Box')
bl_test
# Sequence randomness
bl_test <- Box.test(ts_au, type = 'Ljung-Box')
bl_test
bl_test$p.value
round(bl_test$p.value, 4)
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
# AU ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_au, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_au, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_au, plot = F), main = 'b')+
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_au, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_au, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S2.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# CN ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_cn, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_cn, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_cn, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_cn, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_cn, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_cn, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S3.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# US ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_us, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_us, lag = 54, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_us, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_us, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_us, start = 2015, end = 2019.5)
ts_test <- window(ts_us, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Weekly incidence')
ggsave('./appendix/S4.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# UK ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_uk, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_uk, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_uk, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_uk, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_uk, start = 2015, end = 2019.5)
ts_test <- window(ts_uk, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2)),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S5.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig2_model.R", echo=TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
# AU ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_au, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_au, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_au, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_au, plot = F), main = 'b')+
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_au, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_au, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2), "%"),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S2.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# CN ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_cn, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_cn, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_cn, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_cn, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_cn, start = c(2015, 1), end = c(2019, 6))
ts_test <- window(ts_cn, start = c(2019, 7), end = c(2019, 12))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 6)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2), "%"),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S3.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# US ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_us, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_us, lag = 54, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_us, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_us, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_us, start = 2015, end = 2019.5)
ts_test <- window(ts_us, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2), "%"),
x = 'Date', y = 'Weekly incidence')
ggsave('./appendix/S4.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
# UK ----------------------------------------------------------------------
# sequence stationary test
adf_result <- adf.test(ts_uk, alternative = 'stationary')
# Sequence randomness
bl_test <- Box.test(ts_uk, lag = 12, type = 'Ljung-Box')
# Cross-Correlation
fig1 <- autoplot(acf(ts_uk, plot = F), main = 'a') +
labs(caption = paste("ADF Test p-value: ", round(adf_result$p.value, 4)))
fig2 <- autoplot(pacf(ts_uk, plot = F), main = 'b') +
labs(caption = paste("Ljung-Box Test p-value: ", round(bl_test$p.value, 4)))
# validation
ts_train <- window(ts_uk, start = 2015, end = 2019.5)
ts_test <- window(ts_uk, start = 2019.5, end = 2020)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
model_forecast <- forecast(model, h = 26)
SMAPE <- smape(ts_test, model_forecast$mean)
fig3 <- autoplot(model_forecast, main = 'c') +
geom_line(aes(x = time(ts_test), y = ts_test), color = "red") +
labs(caption = paste("SMAPE: ", round(SMAPE, 2), "%"),
x = 'Date', y = 'Monthly incidence')
ggsave('./appendix/S5.png',
fig1 + fig2 + fig3,
width = 9, height = 4, dpi = 300)
