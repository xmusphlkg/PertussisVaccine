)
## CN
ts_train <- window(ts_cn, start = c(2015, 1), end = c(2023, 6))
ts_observed <- window(ts_cn, start = c(2023, 7), end = c(2024, 2))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'CN',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = zoo::as.Date(time(ts_train)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'CN',
model = '2015-2023'
) |>
bind_rows(df_fit)
View(df_model)
## US
ts_train <- window(ts_us, start = 2015, end = 2023.5)
ts_observed <- window(ts_us, start = 2023.5, end = 2024.5)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = as.Date(df_us$Date[444:479]),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'US',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = as.Date(df_us$Date[1:443]),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'US',
model = '2015-2023'
) |>
bind_rows(df_fit)
## UK
ts_train <- window(ts_uk, start = 2015, end = 2023.5)
ts_observed <- window(ts_uk, start = 2023.5, end = 2024.5)
model <- auto.arima(ts_train)
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = as.Date(df_uk$Date[444:479]),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'UK',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = as.Date(df_uk$Date[1:443]),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'UK',
model = '2015-2023'
) |>
bind_rows(df_fit)
df_list <- list(df_model, df_fit)
write.xlsx(df_list, './Fig Data/fig2.xlsx')
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig2_compare.R", echo=TRUE)
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig2_compare.R", echo=TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(openxlsx)
library(ggh4x)
Sys.setlocale(locale = "en")
fill_color <- pal_npg()(5)
area_color <- fill_color[4:5]
names(area_color) <- c('Decreased', 'Increased')
scientific_10 <- function(x) {
ifelse(x == 0, 0, parse(text = gsub("[+]", "", gsub("e", "%*%10^", scales::scientific_format()(x)))))
}
# Load data
df_predict <- read.xlsx('./Fig Data/fig2.xlsx', sheet = 'Sheet 1', detectDates = T)
df_fit <- read.xlsx('./Fig Data/fig2.xlsx', sheet = 'Sheet 2', detectDates = T)
# plot --------------------------------------------------------------------
i <- 1
country_list <- sort(unique(df_predict$country))
ylabel_list <- c('Monthly incidence', 'Monthly incidence', 'Weekly incidence', 'Weekly incidence')
df_predict$mean[df_predict$mean < 0] <- 0
plot_data <- function(i){
data_predict <- df_predict |>
filter(country == country_list[i]) |>
arrange(date)
data_fit <- df_fit |>
filter(country == country_list[i]) |>
arrange(date)
max_cases <- max(data_fit$simu, data_fit$fit, data_predict$mean, data_predict$observed, na.rm = T)
plot_breaks <- pretty(c(max_cases, 0))
fig1 <- ggplot(data = data_fit, aes(x = date)) +
geom_line(aes(y = fit, color = 'Fitted')) +
geom_line(aes(y = simu, color = 'Observed')) +
geom_line(data = data_predict, aes(y = mean, color = 'Predicted')) +
labs(title = letters[i*2-1], x = 'Date', y = ylabel_list[i]) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y",
breaks = seq(min(data_fit$date), max(data_predict$date), by = "1 years")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks,
limits = range(plot_breaks)) +
scale_color_manual(values = fill_color) +
theme_classic()+
theme(legend.position = c(0.1, 1),
legend.justification = c(0, 0.8),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2-1])
fig2 <- ggplot(data = data_predict, aes(x = date)) +
geom_line(aes(y = mean, color = 'Predicted')) +
geom_line(aes(y = observed, color = 'Observed'))+
stat_difference(aes(ymin = observed, ymax = mean),
alpha = 0.3,
levels = c("Decreased", "Increased"),
show.legend = T)+
coord_cartesian(xlim = as.Date(c('2023-7-1', '2024-4-30'))) +
scale_color_manual(values = fill_color) +
scale_fill_manual(values = area_color) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y-%b",
breaks = seq(as.Date('2023-1-1'), as.Date('2024-4-1'), by = "3 month")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks,
limits = range(plot_breaks)) +
theme_classic()+
theme(legend.position = c(0.1, 1),
legend.justification = c(0, 0.9),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2])
fig1 + fig2 + plot_layout(widths = c(2, 1))
}
plot_all <- lapply(1:4, plot_data)
plot_all <- wrap_plots(plotlist = plot_all, ncol = 1)
ggsave(filename = './main/Fig3.pdf',
plot = plot_all,
width = 12,
height = 7.5,
device = cairo_pdf,
family = 'Times New Roman')
plot_data <- function(i){
data_predict <- df_predict |>
filter(country == country_list[i]) |>
arrange(date)
data_fit <- df_fit |>
filter(country == country_list[i]) |>
arrange(date)
max_cases <- max(data_fit$simu, data_fit$fit, data_predict$mean, data_predict$observed, na.rm = T)
plot_breaks <- pretty(c(max_cases, 0))
fig1 <- ggplot(data = data_fit, aes(x = date)) +
geom_line(aes(y = fit, color = 'Fitted')) +
geom_line(aes(y = simu, color = 'Observed')) +
geom_line(data = data_predict, aes(y = mean, color = 'Predicted')) +
labs(title = letters[i*2-1], x = 'Date', y = ylabel_list[i]) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y",
breaks = seq(min(data_fit$date), max(data_predict$date), by = "1 years")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks,
limits = range(plot_breaks)) +
scale_color_manual(values = fill_color) +
theme_classic()+
theme(legend.position = c(1, 1),
legend.justification = c(0.99, 0.8),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2-1])
fig2 <- ggplot(data = data_predict, aes(x = date)) +
geom_line(aes(y = mean, color = 'Predicted')) +
geom_line(aes(y = observed, color = 'Observed'))+
stat_difference(aes(ymin = observed, ymax = mean),
alpha = 0.3,
levels = c("Decreased", "Increased"),
show.legend = T)+
coord_cartesian(xlim = as.Date(c('2023-7-1', '2024-4-30'))) +
scale_color_manual(values = fill_color) +
scale_fill_manual(values = area_color) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y-%b",
breaks = seq(as.Date('2023-1-1'), as.Date('2024-4-1'), by = "3 month")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks,
limits = range(plot_breaks)) +
theme_classic()+
theme(legend.position = c(0.1, 1),
legend.justification = c(0, 0.9),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2])
fig1 + fig2 + plot_layout(widths = c(2, 1))
}
plot_all <- lapply(1:4, plot_data)
plot_all <- wrap_plots(plotlist = plot_all, ncol = 1)
ggsave(filename = './main/Fig3.pdf',
plot = plot_all,
width = 12,
height = 10,
device = cairo_pdf,
family = 'Times New Roman')
i <- 1
country_list <- sort(unique(df_predict$country))
ylabel_list <- c('Monthly incidence', 'Monthly incidence', 'Weekly incidence', 'Weekly incidence')
df_predict$mean[df_predict$mean < 0] <- 0
data_predict <- df_predict |>
filter(country == country_list[i]) |>
arrange(date)
data_fit <- df_fit |>
filter(country == country_list[i]) |>
arrange(date)
View(data_predict)
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig3_model.R", echo=TRUE)
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(forecast)
library(forecastHybrid)
library(tseries)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T)
# Function to calculate MAPE
smape <- function(actual, forecast) {
n <- length(actual)
sum_val <- sum(2 * abs(forecast - actual) / (abs(actual) + abs(forecast)))
smape_val <- (1 / n) * sum_val * 100
return(smape_val)
}
set.seed(20240321)
df_au <- filter(df_clean, Country == 'AU') |> arrange(Date)
ts_au <- ts(df_au$Cases, start = c(2015, 1), frequency = 12)
df_cn <- filter(df_clean, Country == 'CN') |> arrange(Date)
ts_cn <- ts(df_cn$Cases, start = c(2015, 1), frequency = 12)
df_us <- filter(df_clean, Country == 'US') |> arrange(Date)
ts_us <- ts(df_us$Cases, start = decimal_date(ymd(df_us$Date[1])), frequency = 365.25/7)
df_uk <- filter(df_clean, Country == 'UK') |> arrange(Date)
ts_uk <- ts(df_uk$Cases, start = decimal_date(ymd(df_uk$Date[1])), frequency = 365.25/7)
## AU
ts_train <- window(ts_au, start = c(2015, 1), end = c(2023, 6))
ts_observed <- window(ts_au, start = c(2023, 7), end = c(2024, 2))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'AU',
model = '2015-2019'
)
df_fit <- data.frame(
date = zoo::as.Date(time(ts_train)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'AU',
model = '2015-2019'
)
## CN
ts_train <- window(ts_cn, start = c(2015, 1), end = c(2023, 6))
ts_observed <- window(ts_cn, start = c(2023, 7), end = c(2024, 2))
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = zoo::as.Date(time(outcome$mean)),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'CN',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = zoo::as.Date(time(ts_train)),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'CN',
model = '2015-2023'
) |>
bind_rows(df_fit)
## US
ts_train <- window(ts_us, start = 2015, end = 2023.5)
ts_observed <- window(ts_us, start = 2023.5, end = 2024.5)
model <- auto.arima(ts_train, seasonal = T, ic = 'aicc')
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = as.Date(df_us$Date[444:479]),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'US',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = as.Date(df_us$Date[1:443]),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'US',
model = '2015-2023'
) |>
bind_rows(df_fit)
## UK
ts_train <- window(ts_uk, start = 2015, end = 2023.5)
ts_observed <- window(ts_uk, start = 2023.5, end = 2024.5)
model <- auto.arima(ts_train)
outcome <- forecast(model, h = length(ts_observed))
df_model <- data.frame(
date = as.Date(df_uk$Date[444:479]),
mean = as.matrix(outcome$mean),
observed = as.matrix(ts_observed),
country = 'UK',
model = '2015-2023'
) |>
bind_rows(df_model)
df_fit <- data.frame(
date = as.Date(df_uk$Date[1:443]),
simu = as.numeric(as.matrix(outcome$x)),
fit = as.numeric(as.matrix(outcome$fitted)),
country = 'UK',
model = '2015-2023'
) |>
bind_rows(df_fit)
df_list <- list(df_model, df_fit)
write.xlsx(df_list, './Fig Data/fig2.xlsx')
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig3_visualization.R", echo=TRUE)
plot_data <- function(i){
data_predict <- df_predict |>
filter(country == country_list[i]) |>
arrange(date)
data_fit <- df_fit |>
filter(country == country_list[i]) |>
arrange(date)
max_cases <- max(data_fit$simu, data_fit$fit, data_predict$mean, data_predict$observed, na.rm = T)
plot_breaks <- pretty(c(max_cases, 0))
fig1 <- ggplot(data = data_fit, aes(x = date)) +
geom_line(aes(y = fit, color = 'Fitted')) +
geom_line(aes(y = simu, color = 'Observed')) +
geom_line(data = data_predict, aes(y = mean, color = 'Predicted')) +
labs(title = letters[i*2-1], x = 'Date', y = ylabel_list[i]) +
coord_cartesian(ylim = limits = range(plot_breaks)) +
plot_all <- lapply(1:4, plot_data)
plot_all <- wrap_plots(plotlist = plot_all, ncol = 1)
plot_data <- function(i){
data_predict <- df_predict |>
filter(country == country_list[i]) |>
arrange(date)
data_fit <- df_fit |>
filter(country == country_list[i]) |>
arrange(date)
max_cases <- max(data_fit$simu, data_fit$fit, data_predict$mean, data_predict$observed, na.rm = T)
plot_breaks <- pretty(c(max_cases, 0))
fig1 <- ggplot(data = data_fit, aes(x = date)) +
geom_line(aes(y = fit, color = 'Fitted')) +
geom_line(aes(y = simu, color = 'Observed')) +
geom_line(data = data_predict, aes(y = mean, color = 'Predicted')) +
labs(title = letters[i*2-1], x = 'Date', y = ylabel_list[i]) +
coord_cartesian(ylim = range(plot_breaks)) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y",
breaks = seq(min(data_fit$date), max(data_predict$date), by = "1 years")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks) +
scale_color_manual(values = fill_color) +
theme_classic()+
theme(legend.position = c(1, 1),
legend.justification = c(0.99, 0.8),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2-1])
fig2 <- ggplot(data = data_predict, aes(x = date)) +
geom_line(aes(y = mean, color = 'Predicted')) +
geom_line(aes(y = observed, color = 'Observed'))+
stat_difference(aes(ymin = observed, ymax = mean),
alpha = 0.3,
levels = c("Decreased", "Increased"),
show.legend = T)+
coord_cartesian(xlim = as.Date(c('2023-7-1', '2024-4-30'))) +
scale_color_manual(values = fill_color) +
scale_fill_manual(values = area_color) +
scale_x_date(expand = expansion(add = c(0, 0)),
date_labels = "%Y-%b",
breaks = seq(as.Date('2023-1-1'), as.Date('2024-4-1'), by = "3 month")) +
scale_y_continuous(expand = c(0, 0),
label = scientific_10,
breaks = plot_breaks,
limits = range(plot_breaks)) +
theme_classic()+
theme(legend.position = c(0.1, 1),
legend.justification = c(0, 0.9),
legend.box.just = "left",
legend.margin = margin(0, 0, 0, 0),
legend.title = element_blank(),
legend.background = element_rect(fill = "transparent"),
axis.title = element_text(face = "bold", size = 12, color = "black"),
axis.text = element_text(size = 12, color = "black"),
plot.title.position = "plot",
plot.caption.position = "plot",
plot.title = element_text(face = "bold", size = 14, hjust = 0),
panel.grid.major.y = element_blank(),
panel.grid.minor = element_blank(),
legend.key = element_blank())+
labs(x = 'Date', y = ylabel_list[i], title = letters[i*2])
fig1 + fig2 + plot_layout(widths = c(2, 1))
}
plot_all <- lapply(1:4, plot_data)
plot_all <- wrap_plots(plotlist = plot_all, ncol = 1)
ggsave(filename = './main/Fig3.pdf',
plot = plot_all,
width = 12,
height = 10,
device = cairo_pdf,
family = 'Times New Roman')
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig2_compare.R", echo=TRUE)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T) |>
arrange(Date) |>
group_by(stage, Month, Week) |>
summarise(median = median(Cases),
Q1 = quantile(Cases, 0.25),
Q3 = quantile(Cases, 0.75),
.groups = 'drop')
library(tidyverse)
library(lubridate)
library(ggsci)
library(patchwork)
library(openxlsx)
fill_color <- pal_npg()(3)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T) |>
arrange(Date) |>
group_by(stage, Month, Week) |>
summarise(median = median(Cases),
Q1 = quantile(Cases, 0.25),
Q3 = quantile(Cases, 0.75),
.groups = 'drop')
scientific_10 <- function(x) {
ifelse(x == 0, 0, parse(text = gsub("[+]", "", gsub("e", "%*%10^", scales::scientific_format()(x)))))
}
View(df_clean)
# Load data
df_clean <- read.xlsx('./Fig Data/fig1.xlsx', detectDates = T) |>
arrange(Date) |>
group_by(Country, stage, Month, Week) |>
summarise(median = median(Cases),
Q1 = quantile(Cases, 0.25),
Q3 = quantile(Cases, 0.75),
.groups = 'drop')
source("D:/OneDrive - stu.xmu.edu.cn/XMU/likangguo/2024/06 pertussis/WC_global/Analysis/fig2_compare.R", echo=TRUE)
write.xlsx(df_clean,
'./Fig Data/fig2.xlsx')
