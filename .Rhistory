filename = paste0("./Outcome/S fig1_", i, ".png"),
dpi = 300,
width = 6,
height = 4)
return(country_names[i])
}
fig_s <- map(1:length(country_names), plot_ridges)
DataMedian <- DataNorm |>
group_by(Country) |>
arrange(Age) |>
mutate(cum_weight = cumsum(Density)) |>
summarise(MedianAge = Age[min(which(cum_weight >= sum(Density) / 2))],
.groups = 'drop')
View(DataMedian)
View(DataNorm)
# Load the data
source('./Code/data.R')
remove(list = ls())
# figure 4: the relationship between vaccination strategy and resurgence
source('./Code/fig4.R')
remove(list = ls())
# Load the data
source('./Code/data.R')
remove(list = ls())
# figure 4: the relationship between vaccination strategy and resurgence
source('./Code/fig4.R')
remove(list = ls())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(arsenal)
DataAll <- read.csv("../Outcome/S table1.csv")
DataAll <- read.csv("../Outcome/S table2.csv")
DataAll <- DataAll |>
select(VaccineCode, CoverageDTP1, CoverageDTP3,
VaccineGeneral, GENERALM, GENERALY, TimeLastShot, VaccinePregnant, VaccineAdult, VaccineRisk,
Cluster, OutbreakSize) |>
# fill na in OutbreakSize with -1
mutate(OutbreakSize = ifelse(is.na(OutbreakSize), -1, OutbreakSize),
OutbreakSize = factor(OutbreakSize,
levels = c(0:3),
labels = c('Low', 'Normal', 'High', 'Resurgence')),
CoverageDTP1 = CoverageDTP1*100,
CoverageDTP3 = CoverageDTP3*100,
VaccineCode = factor(VaccineCode,
levels = c('wP', 'aP', 'Both')),
Cluster = factor(Cluster,
levels = c('Low', 'Mild', 'High')))
table_1 <- tableby(Cluster~.,
data = DataAll,
control = tableby.control(digits  = 2,
digits.count = 0,
digits.pct = 2,
digits.p = 3),
numeric.stats = c("Nmiss", 'median', 'q1q3'))
table_labels <- list(
Cluster = 'Disease burden',
VaccineCode = 'Avaliable vaccine type',
CoverageDTP1 = 'Coverage of DTP1 (%)',
CoverageDTP3 = 'Coverage of DTP3 (%)',
VaccineGeneral = 'General vaccine recommendation',
GENERALM = 'General vaccine recommendation for toddlers, <2yr',
GENERALY = 'General vaccine recommendation for children, 2+yr',
TimeLastShot = 'Time of last shot (months)',
VaccinePregnant = 'Vaccine recommendation for pregnant',
VaccineAdult = 'Vaccine recommendation for adults',
VaccineRisk = 'Vaccine recommendation for risk groups',
OutbreakSize = 'Pertussis status in 2022/2023'
)
summary(table_1,
labelTranslations = table_labels)
# This script generates Figure 3 in the manuscript.
# To determine the pertussis status in 2022 and 2023,
# we used the median incidence in the pre-epidemic period as the threshold.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table2.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
# find the country not in Map data
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataMapPlot <- DataMap |>
left_join(DataAll, by = c('iso_a3' = 'CODE'))
# write csv
data <- DataAll |>
select(WHO_REGION, NAME, CODE,
IncidencePre, IncidencePre25, IncidencePre75, IncidencePreIQR,
Incidence2022, OutbreakSize2022,
Incidence2023, OutbreakSize2023)
View(data)
DataAll <- read.csv("./Outcome/S table2.csv")
View(DataAll)
Sys.setlocale("LC_TIME", "English")
# packages ----------------------------------------------------------------
library(tidyverse)
library(openxlsx)
library(lubridate)
library(jsonlite)
source('./Code/function.R')
# Data --------------------------------------------------------------------
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/diphtheria-tetanus-toxoid-and-pertussis-(dtp)-vaccination-coverage?ANTIGEN=&YEAR=&CODE=
## Diphtheria tetanus toxoid and pertussis (DTP) vaccination coverage
## These data represent administrative and official Diphtheria Tetanus Toxoid and Pertussis (DTP) vaccination coverage reported annually through the WHO/UNICEF Joint Reporting Form on Immunization (JRF). Data is updated as country data is received.
## WHO/UNICEF Estimates of National Immunization Coverage (WUENIC) are also displayed here. National, regional, and global data are updated annually mid-July.
DataVacCover <- read.xlsx("./Data/DTP vaccination coverage.xlsx")
DataVacCover <- DataVacCover |>
filter(COVERAGE_CATEGORY == 'WUENIC' & GROUP == 'COUNTRIES') |>
select(CODE, NAME, ANTIGEN, COVERAGE, YEAR) |>
group_by(CODE, NAME, ANTIGEN) |>
mutate(MAX_YEAR = max(YEAR)) |>
filter(YEAR == MAX_YEAR) |>
summarise(
COVERAGE = max(COVERAGE),
MAX_YEAR = max(YEAR),
.groups = 'drop'
) |>
pivot_wider(names_from = ANTIGEN, values_from = COVERAGE) |>
select(-MAX_YEAR) |>
rename(CoverageDTP3 = DTPCV3,
CoverageDTP1 = DTPCV1)
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/vaccination-schedule-for-pertussis?ISO_3_CODE=&TARGETPOP_GENERAL=
## Vaccination schedule for Pertussis
## The vaccine scheduler table summarizes the current vaccination schedule for young children, adolescents, and adults for Pertussis. The data is updated regularly with the most recent official country reporting collected through the WHO/UNICEF joint reporting process.
DataVacSchedule <- read.xlsx("./Data/Vaccination schedule for Pertussis.xlsx") |>
filter(!is.na(COUNTRYNAME))
DataInfo <- DataVacSchedule |>
select(ISO_3_CODE, COUNTRYNAME, WHO_REGION) |>
unique() |>
rename(CODE = ISO_3_CODE, NAME = COUNTRYNAME)
DataVacSchedule <- DataVacSchedule |>
select(ISO_3_CODE, COUNTRYNAME, VACCINECODE, SCHEDULEROUNDS, TARGETPOP_DESCRIPTION,
AGEADMINISTERED, VACCINEDESCRIPTIONSHORT, YEAR, SCHEDULERCODE) |>
rename(CODE = ISO_3_CODE, NAME = COUNTRYNAME)
# Use wP vaccine
DataVacWP <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('General/routine')) |>
select(CODE, NAME, SCHEDULERCODE) |>
unique() |>
mutate(A = T) |>
pivot_wider(names_from = SCHEDULERCODE, values_from = A) |>
mutate(VaccineCode = case_when(
aP & wP ~ 'Both',
aP ~ 'aP',
wP ~ 'wP',
TRUE ~ 'Unknown'
),
VaccineCode = factor(VaccineCode, levels = c('wP', 'aP', 'Both', 'Unknown'))) |>
select(CODE, NAME, VaccineCode)
# Adult
DataVacScheduleAdult <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% 'Adults') |>
select(CODE, NAME, SCHEDULEROUNDS) |>
unique() |>
group_by(CODE, NAME) |>
summarise(ADULT = 1,
.groups = 'drop')
# "Risk group(s)" or "Health workers"
DataVacScheduleRisk <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('Risk group(s)', "Health workers")) |>
select(CODE, NAME, SCHEDULEROUNDS) |>
unique() |>
group_by(CODE, NAME) |>
summarise(RISK = 1,
.groups = 'drop')
# Pregnant women
DataVacSchedulePreg <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION == 'Pregnant women') |>
select(CODE, NAME, SCHEDULEROUNDS) |>
unique() |>
group_by(CODE, NAME) |>
summarise(PREGNANT = 1,
.groups = 'drop')
# General/routine
DataVacScheduleGenM <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION == 'General/routine') |>
# filter AGEADMINISTERED contains M or W
filter(str_detect(AGEADMINISTERED, '[MÐœ]|W')) |>
select(CODE, NAME, SCHEDULEROUNDS, AGEADMINISTERED) |>
unique() |>
group_by(CODE, NAME) |>
summarise(AGEADMINISTERED = length(unique(AGEADMINISTERED)),
SCHEDULEROUNDS = length(unique(SCHEDULEROUNDS)),
.groups = 'keep') |>
mutate(GENERALM = min(SCHEDULEROUNDS, AGEADMINISTERED)) |>
select(CODE, NAME, GENERALM)
DataVacScheduleGenY <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION == 'General/routine') |>
# filter AGEADMINISTERED contains Y
filter(str_detect(AGEADMINISTERED, 'Y')) |>
select(CODE, NAME, SCHEDULEROUNDS, AGEADMINISTERED) |>
unique() |>
group_by(CODE, NAME) |>
summarise(AGEADMINISTERED = length(unique(AGEADMINISTERED)),
SCHEDULEROUNDS = length(unique(SCHEDULEROUNDS)),
.groups = 'keep') |>
mutate(GENERALY = min(SCHEDULEROUNDS, AGEADMINISTERED)) |>
select(CODE, NAME, GENERALY)
DataVacScheduleGen <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION == 'General/routine') |>
group_by(CODE, NAME) |>
summarise(GENERALLASTSHOT = max(process_date_column(unique(AGEADMINISTERED))),
GENERALFIRSTSHOT = min(process_date_column(unique(AGEADMINISTERED))),
.groups = 'drop') |>
left_join(DataVacScheduleGenM, by = c('CODE', 'NAME')) |>
left_join(DataVacScheduleGenY, by = c('CODE', 'NAME')) |>
mutate(GENERALY = replace_na(GENERALY, 0),
GENERAL = GENERALM + GENERALY)
DataVacSchedule <- DataVacSchedule |>
select(CODE, NAME) |>
unique() |>
full_join(DataVacSchedulePreg, by = c('CODE', 'NAME')) |>
mutate(PREGNANT = replace_na(PREGNANT, 0)) |>
full_join(DataVacScheduleAdult, by = c('CODE', 'NAME')) |>
mutate(ADULT = replace_na(ADULT, 0)) |>
full_join(DataVacScheduleRisk, by = c('CODE', 'NAME')) |>
mutate(RISK = replace_na(RISK, 0)) |>
full_join(DataVacScheduleGen, by = c('CODE', 'NAME'))
DataVacSchedule <- DataVacSchedule |>
rename(TimeFirstShot = GENERALFIRSTSHOT,
TimeLastShot = GENERALLASTSHOT,
VaccinePregnant = PREGNANT,
VaccineAdult = ADULT,
VaccineRisk = RISK,
VaccineGeneral = GENERAL)
remove(DataVacSchedulePreg, DataVacScheduleAdult, DataVacScheduleRisk,
DataVacScheduleGen, DataVacScheduleGenM, DataVacScheduleGenY)
## Data from the World Health Organization (WHO)
## Merge all data
DataVac <- DataVacCover |>
merge(DataVacSchedule, by = c('CODE', 'NAME'), all = T) |>
merge(DataVacWP, by = c('CODE', 'NAME'), all = T)
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/pertussis-reported-cases-and-incidence
## Pertussis incidence after 2010
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]
DataInci <- DataInci |>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
filter(NAME %in% DataVac$NAME) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence),
Incidence = if_else(is.na(Incidence), Incidence, Incidence + 0.001)
) |>
group_by(NAME, Period) |>
summarise(Incidence_50 = median(Incidence, na.rm = T),
Incidence_25 = quantile(Incidence, 0.25, na.rm = T),
Incidence_75 = quantile(Incidence, 0.75, na.rm = T),
IQR = Incidence_75 - Incidence_25,
.groups = 'drop') |>
pivot_wider(names_from = Period,
values_from = c(Incidence_50, Incidence_25, Incidence_75, IQR),
names_glue = "{Period}_{.value}") |>
select(NAME,
`Pre-epidemic_Incidence_50`, `Pre-epidemic_Incidence_25`, `Pre-epidemic_Incidence_75`, `Pre-epidemic_IQR`,
`2022_Incidence_50`, `2023_Incidence_50`) |>
rename(`2022` = `2022_Incidence_50`,
`2023` = `2023_Incidence_50`) |>
mutate(OutbreakSize2022 = case_when(`2022` <= `Pre-epidemic_Incidence_25` ~ 'Low',
`2022` > `Pre-epidemic_Incidence_25` & `2022` <= `Pre-epidemic_Incidence_75` ~ 'Normal',
`2022` > `Pre-epidemic_Incidence_75` &
`2022` <= `Pre-epidemic_Incidence_75` + 1.5*`Pre-epidemic_IQR` ~ 'High',
`2022` > `Pre-epidemic_Incidence_75` + 1.5*`Pre-epidemic_IQR` ~ 'Resurgence',
TRUE ~ 'Unavailable'),
OutbreakSize2023 = case_when(`2023` <= `Pre-epidemic_Incidence_25` ~ 'Low',
`2023` > `Pre-epidemic_Incidence_25` & `2023` <= `Pre-epidemic_Incidence_75` ~ 'Normal',
`2023` > `Pre-epidemic_Incidence_75` &
`2023` <= `Pre-epidemic_Incidence_75` + 1.5*`Pre-epidemic_IQR` ~ 'High',
`2023` > `Pre-epidemic_Incidence_75` + 1.5*`Pre-epidemic_IQR` ~ 'Resurgence',
TRUE ~ 'Unavailable'),
`2023-change` = `2023`/`Pre-epidemic_Incidence_50`,
`2022-change` = `2022`/`Pre-epidemic_Incidence_50`,
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize = case_when(
OutbreakSize2022 == 'Resurgence' | OutbreakSize2023 == 'Resurgence' ~ 3,
OutbreakSize2022 == 'High' | OutbreakSize2023 == 'High' ~ 2,
OutbreakSize2022 == 'Normal' | OutbreakSize2023 == 'Normal' ~ 1,
OutbreakSize2022 == 'Low' | OutbreakSize2023 == 'Low' ~ 0,
TRUE ~ NA_real_
)) |>
select(NAME, OutbreakSize2022, OutbreakSize2023, OutbreakSize,
`Pre-epidemic_Incidence_50`, `Pre-epidemic_Incidence_25`, `Pre-epidemic_Incidence_75`, `Pre-epidemic_IQR`,
`2022`, `2022-change`, `2023`, `2023-change`) |>
rename(IncidencePre = `Pre-epidemic_Incidence_50`,
IncidencePre25 = `Pre-epidemic_Incidence_25`,
IncidencePre75 = `Pre-epidemic_Incidence_75`,
IncidencePreIQR = `Pre-epidemic_IQR`,
Incidence2022 = `2022`,
Incidence2023 = `2023`,
Change2022 = `2022-change`,
Change2023 = `2023-change`) |>
mutate(IncidencePre = IncidencePre - 0.001,
IncidencePre25 = IncidencePre25 - 0.001,
IncidencePre75 = IncidencePre75 - 0.001,
Incidence2022 = Incidence2022 - 0.001,
Incidence2023 = Incidence2023 - 0.001,
Change2022 = round(Change2022, 2),
Change2023 = round(Change2023, 2))
## Merge all data
# Data <- DataVac |>
#      merge(DataOutbreak, by = c('NAME'), all = T) |>
#      mutate(OutbreakNews = replace_na(Outbreak, 0)) |>
#      merge(DataInci, by = c('NAME'), all = T) |>
#      select(-Outbreak)
DataClass <- read.xlsx('./Data/CLASS.xlsx') |>
select(Code, Region, Income.group)
Data <- DataVac |>
merge(DataInci, by = c('NAME'), all = T) |>
left_join(DataInfo, by = c('CODE', 'NAME')) |>
select(WHO_REGION, CODE, NAME, everything()) |>
left_join(DataClass, by = c(CODE = 'Code')) |>
mutate(Income.group = case_when(
is.na(Income.group) ~ 'Low income',
TRUE ~ Income.group
))
View(Data)
write.csv(Data, './Outcome/S table2.csv', row.names = F)
print("Data cleaned successfully!")
DataAll <- read.csv("./Outcome/S table2.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
source("D:/OneDrive - work/OneDrive - MSFT/XMU/likangguo/2024/06 pertussis/PertussisVaccine/Code/fig3.R", echo=TRUE)
# This script generates Figure 1 in the manuscript.
# packages ----------------------------------------------------------------
library(tidyverse)
library(lubridate)
library(patchwork)
library(openxlsx)
library(ggridges)
library(paletteer)
library(grid)
library(gtable)
library(sf)
library(ggh4x)
library(randomForest)
scientific_10 <- function(x) {
x_f <- gsub("[+]", "", gsub("1e", "10^", scales::scientific_format()(x)))
x_f[x_f == "10^00"] <- "1"
# replace 10^0 with 1
x_f <- parse(text = x_f)
return(x_f)
}
# data --------------------------------------------------------------------
country_names <- openxlsx::getSheetNames('./Data/Pertussis case year age.xlsx')
# EU data
data_EU <- read.xlsx('./Data/Pertussis case year age.xlsx', sheet = 'EU', detectDates = T) |>
filter(Distribution == 'Distribution by age' &
!str_detect(RegionCode, 'EU')) |>
select(Time, RegionCode, Category, Value) |>
mutate(RegionCode = case_when(RegionCode == 'UK' ~ 'GB',
RegionCode == 'EL' ~ 'GR',
TRUE ~ RegionCode)) |>
rename(Year = Time,
Country = RegionCode,
Age = Category,
Weight = Value) |>
mutate(Age = case_when(Age == "<1" ~ "00-00",
TRUE ~ Age))
data_EU_all <- read.csv('./Data/ECDC_surveillance_data_Pertussis.csv') |>
select(Time, RegionCode, NumValue) |>
rename(Year = Time,
Country = RegionCode,
CasesAll = NumValue)
data_EU <- data_EU |>
mutate(Weight = as.numeric(Weight)/100,
StartAge = case_when(grepl("-", Age) ~ as.numeric(sub("-.*", "", Age)),
grepl("\\+", Age) ~ as.numeric(sub("\\+.*", "", Age)),
TRUE ~ NA_real_),
EndAge = case_when(grepl("-", Age) ~ as.numeric(sub(".*-", "", Age)),
grepl("\\+", Age) ~ 100,
TRUE ~ NA_real_)) |>
filter(Country != 'GB' & Country != 'FR' & !is.na(Weight) & !str_detect(Country, 'EU')) |>
left_join(data_EU_all, by = c('Year', 'Country')) |>
mutate(Cases = round(Weight * CasesAll))
# find the countries only one group data
data_EU |>
filter(Cases != 0) |>
select(Country, Age) |>
group_by(Country) |>
summarise(Count = length(unique(Age)))
print(paste("EU data has", length(unique(data_EU$Country)), "countries", sep = " "))
print(sort(unique(data_EU$Country)))
# data without EU
country_names <- country_names[country_names != 'EU']
data_other <- lapply(country_names, function(x){
data <- read.xlsx('./Data/Pertussis case year age.xlsx', sheet = x, detectDates = T)
names(data)[1] <- 'Year'
data[is.na(data)] <- 0
data <- data |>
# if exist unknow column, drop it
select(-contains("Unknow")) |>
pivot_longer(cols = -Year, names_to = 'Age', values_to = 'Incidence') |>
mutate(StartAge = case_when(grepl("-", Age) ~ as.numeric(sub("-.*", "", Age)),
grepl("\\+", Age) ~ as.numeric(sub("\\+.*", "", Age)),
TRUE ~ NA_real_),
EndAge = case_when(grepl("-", Age) ~ as.numeric(sub(".*-", "", Age)),
grepl("\\+", Age) ~ 100,
TRUE ~ NA_real_),
Country = x) |>
rowwise() |>
rename(Cases = Incidence) |>
# standardize incidence by each country and year
group_by(Country, Year) |>
mutate(Weight = Cases/sum(Cases),
Weight = case_when(is.na(Weight) ~ 0,
TRUE ~ Weight),
CasesAll = sum(Cases))
return(data)
})
data_other <- do.call(rbind, data_other)
DataRaw <- rbind(data_EU, data_other) |>
mutate(EndAge = case_when(EndAge == 100 ~ 100,
TRUE ~ EndAge +0.9)) |>
filter(Year >= 2010)
remove(data_EU, data_other, data_EU_all)
# print the date range for each country
DataRaw |>
group_by(Country) |>
summarise(Start = min(Year),
End = max(Year),
Case = paste(min(CasesAll), max(CasesAll), sep = '-')) |>
arrange(Start) |>
print(n = Inf)
# Vaccination strategy data
DataVac <- read.csv('./Outcome/S table2.csv')
DataVac <- DataVac |>
select(CODE, NAME, VaccineGeneral, TimeLastShot,
VaccineAdult, VaccineRisk, VaccinePregnant,
CoverageDTP1, CoverageDTP3)
# appendix figure --------------------------------------------------------------------
DataNorm <- DataRaw|>
rowwise() |>
mutate(AgeList = if_else(is.na(StartAge), list(NA_real_), list(seq(StartAge, EndAge)))) |>
unnest(cols = c(AgeList)) |>
filter(!is.na(AgeList)) |>
group_by(Year, Country, AgeList) |>
mutate(AverageCases = Cases / (EndAge - StartAge + 0.1)) |>
ungroup() |>
select(Country, Year, Age = AgeList, AverageCases) |>
group_by(Country, Year) |>
mutate(
Weight = AverageCases / sum(AverageCases),
Weight = case_when(
is.na(Weight) ~ 0,
TRUE ~ Weight
)
) |>
ungroup() |>
group_by(Country, Year) |>
summarise(
Age_Density = list({
dens <- density(Age, weights = Weight, kernel = "epanechnikov", adjust = 0.3, from = 0)
data.frame(Age = dens$x, Density = dens$y)
}),
.groups = 'drop'
) |>
unnest(cols = c(Age_Density))
country_names <- c('AT', 'AU', 'BE', 'BG', 'BR', 'CA', 'CN', 'CY', 'CZ', 'DE',
'DK', 'EE', 'GR', 'ES', 'FI', 'GB', 'HR', 'HU', 'IE',
'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'NZ', 'PL',
'PT', 'RO', 'SE', 'SG', 'SI', 'SK', 'US')
country_labels <- c('Austria', 'Australia', 'Belgium', 'Bulgaria', 'Brazil', 'Canada', 'China', 'Cyprus', 'Czech Republic', 'Germany',
'Denmark', 'Estonia', 'Greece', 'Spain', 'Finland', 'United Kingdom', 'Croatia', 'Hungary', 'Ireland',
'Iceland', 'Italy', 'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Norway', 'New Zealand', 'Poland',
'Portugal', 'Romania', 'Sweden', 'Singapore', 'Slovenia', 'Slovakia', 'United States')
fill_color <- rev(c("#1E313EFF", "#4E475FFF", "#8B5975FF", "#C86C7CFF", "#FA8975FF"))
DataMedian <- DataNorm |>
group_by(Country) |>
arrange(Age) |>
mutate(cum_weight = cumsum(Density)) |>
summarise(MedianAge = Age[min(which(cum_weight >= sum(Density) / 2))],
.groups = 'drop')
View(DataMedian)
