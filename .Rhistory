TRUE ~ OutbreakSize2023)) |>
# shorten the NAME of the country
mutate(NAME = case_when(
NAME == 'Micronesia (Federated States of)' ~ 'Micronesia',
NAME == 'Bolivia (Plurinational State of)' ~ 'Bolivia',
NAME == 'Russian Federation' ~ 'Russia',
NAME == 'Syrian Arab Republic' ~ 'Syria',
NAME == 'Solomon Islands' ~ 'Solomon',
TRUE ~ NAME
))
View(DataRe)
View(DataRe)
View(DataInci)
source("D:/OneDrive - work/OneDrive - MSFT/XMU/likangguo/2024/06 pertussis/PertussisVaccine/Code/fig3.R", echo=TRUE)
# This script generates Figure 3 in the manuscript.
# To determine the pertussis status in 2022 and 2023,
# we used the median incidence in the pre-epidemic period as the threshold.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table1.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
# find the country not in Map data
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataMapPlot <- DataMap |>
left_join(DataAll, by = c('iso_a3' = 'CODE'))
# panel a -----------------------------------------------------------------
fill_color <- rev(c("grey50", '#DD5129FF', '#FAB255FF', '#0F7BA2FF', '#43B284FF'))
DataExample <- DataInci |>
filter(NAME %in% c('China', 'Canada')) |>
as.data.frame() |>
mutate(YEAR = as.numeric(YEAR))
DataExampleThreshold <- DataAll |>
filter(NAME %in% c('China', 'Canada')) |>
mutate(line1 = 0,
line2 = IncidencePre25,
line3 = IncidencePre75,
line4 = IncidencePre75 + 1.5*IncidencePreIQR,
line5 = Inf) |>
select(NAME, line1:line5)
fig_0_1 <- ggplot(data = DataExample,
mapping = aes(x = YEAR, y = Incidence, shape = NAME)) +
geom_line(color = "#862633FF") +
geom_point(color = "#862633FF")+
geom_vline(xintercept = 2019.5) +
scale_x_continuous(limits = c(2009, 2024),
expand = c(0, 0),
breaks = seq(2010, 2023, 3)) +
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = c(0.99, 0.99),
legend.justification = c(1, 1),
legend.box = 'horizontal',
plot.title.position = 'plot') +
labs(x = NULL, y = "Yearly incidence", shape = NULL, title = 'A')
fig_0_2 <- DataExample |>
filter(Period == 'Pre-epidemic') |>
ggplot() +
geom_rect(data = DataExampleThreshold,
aes(xmin = -Inf, xmax = Inf, ymin = line1, ymax = line2, fill = 'Low'),
show.legend = F,
alpha = 1) +
geom_rect(data = DataExampleThreshold,
aes(xmin = -Inf, xmax = Inf, ymin = line2, ymax = line3, fill = 'Normal'),
show.legend = F,
alpha = 1) +
geom_rect(data = DataExampleThreshold,
aes(xmin = -Inf, xmax = Inf, ymin = line3, ymax = line4, fill = 'High'),
show.legend = F,
alpha = 1) +
geom_rect(data = DataExampleThreshold,
aes(xmin = -Inf, xmax = Inf, ymin = line4, ymax = line5, fill = 'Resurgence'),
show.legend = F,
alpha = 1) +
geom_jitter(aes(x = NAME, y = Incidence),
fill = NA,
height = 0,
color = 'black',
show.legend = F) +
geom_point(data = filter(DataExample, YEAR %in% 2022:2023),
mapping = aes(x = NAME, y = Incidence),
shape = 3,
color = 'white') +
geom_text(data = filter(DataExample, YEAR %in% 2022:2023),
mapping = aes(x = NAME, y = Incidence, label = YEAR),
vjust = -0.5,
hjust = -0.1,
color = 'white',
fontface = 'bold',
size = 2.5) +
scale_fill_manual(values = rev(fill_color)[-1],
breaks = rev(c('Low', 'Normal', 'High', 'Resurgence')),
na.translate = F) +
scale_y_continuous(limits = c(0, NA),
expand = expansion(mult = c(0, 0.3))) +
facet_wrap(~NAME, scales = 'free') +
theme(axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
axis.line.y = element_line(color = 'black'),
legend.position = 'left',
legend.title.align = 0,
legend.direction = 'vertical',
plot.title.position = 'plot',
strip.text = element_blank(),
legend.text = element_text(angle = 90),
legend.title = element_text(angle = 90)) +
labs(x = NULL, y = "Yearly incidence", fill = '', title = 'B') +
guides(fill = guide_legend(title.position = 'left',
label.position = 'bottom',
label.vjust = 0.5,
nrow = 4))
fig_0 <- fig_0_1 + fig_0_2
## panel b&c -----------------------------------------------------------------
fill_color <- c("grey50", '#43B284FF', '#0F7BA2FF', '#FAB255FF', '#DD5129FF')
fig_1_m <- plot_map_col(DataAll$OutbreakSize2022, fill_color) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$OutbreakSize2022),
limits = levels(DataAll$OutbreakSize2022),
na.translate = F)+
theme(axis.text.x = element_blank())
fig_1 <- ggplot(data = DataMapPlot) +
geom_sf(aes(fill = factor(OutbreakSize2022)),
show.legend = F) +
# add x, y tick labels
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits = c(-180, 180),
expand = c(0, 0)) +
scale_y_continuous(limits = c(-60, 75)) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$OutbreakSize2022),
limits = levels(DataAll$OutbreakSize2022),
na.translate = F)+
theme_bw() +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "#C1CDCD", color = NA),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = 'bottom',
legend.box = 'horizontal',
plot.title.position = 'plot') +
labs(title = "C", x = NULL, y = NULL, fill = 'Pertussis status in 2022')+
guides(fill = guide_legend(nrow = 1))
fig_1 <- fig_1 + inset_element(fig_1_m, left = 0.01, bottom = 0.01, right = 0.25, top = 0.45)
fig_2_m <- plot_map_col(DataAll$OutbreakSize2023, fill_color) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$OutbreakSize2022),
limits = levels(DataAll$OutbreakSize2022),
na.translate = F)+
theme(axis.text.x = element_blank())
fig_2 <- ggplot(data = DataMapPlot) +
geom_sf(aes(fill = factor(OutbreakSize2023))) +
# add x, y tick labels
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits = c(-180, 180),
expand = c(0, 0)) +
scale_y_continuous(limits = c(-60, 75)) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$OutbreakSize2022),
limits = levels(DataAll$OutbreakSize2022),
na.translate = F)+
theme_bw() +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "#C1CDCD", color = NA),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = 'bottom',
legend.box = 'horizontal',
plot.title.position = 'plot') +
labs(title = "D", x = NULL, y = NULL, fill = 'Pertussis status')+
guides(fill = guide_legend(nrow = 1))
fig_2 <- fig_2 + inset_element(fig_2_m, left = 0.01, bottom = 0.01, right = 0.25, top = 0.45)
# combine -----------------------------------------------------------------
design <- "
AB
CC
DD
"
fig_r <- fig_0_1 + fig_0_2 + fig_1 + fig_2 +
plot_layout(design = design, widths = c(3, 1.1))
# fig_l <- fig_3 + fig_4 +
#      plot_layout(ncol = 1)
#
# fig <- cowplot::plot_grid(fig_r, fig_l, nrow = 1, rel_widths = c(1, 1))
# fig_l <- fig_3 + fig_4 +
#      plot_layout(ncol = 1)
#
# fig <- cowplot::plot_grid(fig_r, fig_l, nrow = 1, rel_widths = c(1, 1))
ggsave("./Outcome/fig3.pdf",
fig_r,
width = 6,
height = 9,
device = cairo_pdf)
View(DataAll)
DataAll[DataAll$OutbreakSize2023 == 'Resurgence',]
DataAll[DataAll$OutbreakSize2023 == 'Resurgence','NAME']
paste(DataAll[DataAll$OutbreakSize2023 == 'Resurgence','NAME'], collapse = ',')
paste(DataAll[DataAll$OutbreakSize2023 == 'Resurgence','NAME'], collapse = ', ')
View(DataInci)
View(DataAll)
View(DataInci)
View(DataAll)
DataAll$OutbreakSize2022 == 'Resurgence'
DataAll[DataAll$OutbreakSize2022 == 'Resurgence' | DataAll$OutbreakSize2023 == 'Resurgence',]
DataAll[DataAll$OutbreakSize2022 == 'Resurgence' | DataAll$OutbreakSize2023 == 'Resurgence','NAME']
DataAll[DataAll$OutbreakSize2022 == 'Resurgence' & DataAll$OutbreakSize2023 == 'Resurgence','NAME']
remove(list = ls())
# figure 4: the relationship between vaccination strategy and resurgence
source('./Code/fig4.R')
remove(list = ls())
# table 1
knitr::knit('./Code/table1.Rmd',
output = './Outcome/table1.md')
# table 1
knitr::knit('./Code/table1.Rmd',
output = './Outcome/table1.md')
View(DataAll)
20264/60
20264/60/24
20264/60/8
3/45
28/168
168-28
vaccine <- c(rep("Yes", 45), rep("No", 168))
vaccine_w <- c(rep("Yes", 3), rep("No", 42), rep("Yes", 28), rep("No", 140))
# 构建列联表
table <- table(vaccine, vaccine_w)
# 进行卡方检验
chisq.test(table)
28/168
3/45
# This script generates Figure 3 in the manuscript.
# To determine the pertussis status in 2022 and 2023,
# we used the median incidence in the pre-epidemic period as the threshold.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table1.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
# find the country not in Map data
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataMapPlot <- DataMap |>
left_join(DataAll, by = c('iso_a3' = 'CODE'))
view(DataAll)
# write csv
data <- DataAll |>
select(WHO_REGION, NAME, CODE,
IncidencePre, IncidencePre25, IncidencePre75, IncidencePreIQR,
Incidence2022, OutbreakSize2022,
Incidence2023, OutbreakSize2023)
write.csv(data, './Outcome/fig data/fig3.csv', row.names = F)
# This script generates Figure 5 in the manuscript.
# To analyze the relationship between the pertussis resurgence and vaccination strategy in different countries,
# we first cluster the countries based on the incidence of pertussis from 2010 to 2019.
# We then examine the importance of different variables in predicting the disease burden in each cluster
# using random forest analysis.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
library(factoextra)
library(ggdendroplot)
library(caret)
library(mice)
library(randomForest)
library(edarf)
library(GGally)
library(scales)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table1.csv") |>
mutate(CoverageDTP1 = CoverageDTP1/100,
CoverageDTP3 = CoverageDTP3/100,
VaccineGeneral = as.factor(VaccineGeneral),
GENERALY = as.factor(GENERALY),
GENERALM = as.factor(GENERALM),
VaccineAdult = if_else(VaccineAdult == 1, 'Yes', 'No'),
VaccinePregnant = if_else(VaccinePregnant == 1, 'Yes', 'No'),
VaccineRisk = if_else(VaccineRisk == 1, 'Yes', 'No'),
VaccineAP = if_else(VaccineCode %in% c('aP', 'Both'), 1, 0),
VaccineWP = if_else(VaccineCode %in% c('wP', 'Both'), 1, 0),
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Low', 'Normal', 'High', 'Resurgence')))
ggsave("./Outcome/S fig2_1.png",
DataAll |>
select(CoverageDTP1:VaccineGeneral, -TimeFirstShot) |>
ggpairs(columnLabels = c('DTP1 coverage', 'DTP3 coverage',
'Vaccine for pregnant', 'Vaccine for adult', 'Vaccine for risk',
'Time of\nlast general vaccine shot (months)',
'General vaccine recommendation\nfor toddlers, -3yr',
'General vaccine recommendation\nfor children, 3+yr',
'General vaccine recommendation'),
bins = 30,
title = 'Correlation plot'),
width = 15,
height = 15,
dpi = 300)
# map data ----------------------------------------------------------------
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataInciRaw <- read.xlsx("./Data/Pertussis incidence.xlsx") |>
select(1:3, `2023`:`2010`)
DataInciRaw <- DataInciRaw |>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
filter(NAME %in% DataAll$NAME) |>
# trance 2023:2010 to numeric
mutate(across('2023':'2010', ~as.numeric(.)))
DataInciRaw |>
select(NAME, `2019`:`2010`) |>
pivot_longer(cols = `2019`:`2010`, names_to = 'Year', values_to = 'Incidence') |>
group_by(NAME) |>
summarise(Incidence = median(Incidence, na.rm = T)) |>
arrange(desc(Incidence)) |>
head(10) |>
as.data.frame()
# incidence cluster -------------------------------------------------------
set.seed(20240521)
fill_color_disease <- rev(c('#DD5129FF', '#FAB255FF', '#0F7BA2FF', '#43B284FF' ))
DataInci <- DataInciRaw |>
select('2019':'2010')
names(DataInci) <- paste0("X", names(DataInci))
rownames(DataInci) <- DataInciRaw$NAME
# random forest imputation
DataMatInci <-DataInci|>
mice(method = 'rf', m = 1) |>
complete() |>
as.matrix()
DataMatInci <- log(DataMatInci + 0.001)
# hierarchical clustering
hcdata <- scale(DataMatInci) |>
hkmeans(3)
DataCluster <- hcdata$cluster |>
as.data.frame() |>
mutate(Cluster = as.factor(hcdata$cluster),
Cluster = fct_recode(Cluster, 'Low' = '3', 'Mild' = '1', 'High' = '2'),
Cluster = factor(Cluster, levels = c('Low', 'Mild', 'High'))) |>
select(Cluster) |>
rownames_to_column('NAME')
DataAll <- DataAll |>
left_join(DataCluster, by = 'NAME')
DataCluster <- cbind(DataCluster, exp(DataMatInci)) |>
pivot_longer(cols = -c(NAME, Cluster), names_to = 'Year', values_to = 'IncidenceImput') |>
mutate(Year = as.numeric(gsub('X', '', Year)))
table(hcdata$cluster)
DataAll |>
group_by(Cluster) |>
summarise(Incidence = mean(IncidencePre, na.rm = T))
View(DataAll)
source("D:/OneDrive - work/OneDrive - MSFT/XMU/likangguo/2024/06 pertussis/PertussisVaccine/Code/data.R", echo=TRUE)
source("D:/OneDrive - work/OneDrive - MSFT/XMU/likangguo/2024/06 pertussis/PertussisVaccine/Code/fig4.R", echo=TRUE)
View(fig_4)
data <- rbind(fig_4$data, fig_5$data, fig_6$data)
View(data)
plot_rf <- function(i){
# Filter data for the specific cluster
cl <- levels(DataAll$Cluster)[i]
print(paste0('########## Cluster ', cl, ' ##########'))
Data <- DataAll |>
filter(Cluster %in% cl)  |>
select(CoverageDTP1:VaccineCode, VaccineAP, VaccineWP, OutbreakSize)  |>
mutate(
VaccineGeneral = as.numeric(str_extract(as.character(VaccineGeneral), '\\d+')),
TimeLastShot = log10(TimeLastShot),
GENERALM = as.numeric(str_extract(as.character(GENERALM), '\\d+')),
GENERALY = as.numeric(str_extract(as.character(GENERALY), '\\d+')),
GENERALY = case_when(is.na(GENERALY) ~ 0,
TRUE ~ GENERALY),
VaccinePregnant = factor(VaccinePregnant),
VaccineAdult = factor(VaccineAdult),
VaccineRisk = factor(VaccineRisk),
VaccineGeneral = factor(VaccineGeneral),
GENERALM = factor(GENERALM),
GENERALY = factor(GENERALY)
)  |>
filter(!is.na(OutbreakSize) & !is.infinite(OutbreakSize))  |>
select(-c(VaccineCode, VaccineGeneral, TimeFirstShot)) |>
na.omit()
# Prepare the model matrix
y <- Data$OutbreakSize
x <- Data |> select(-OutbreakSize)
# Fit random forest model
rf_model <- randomForest(x, y, importance = TRUE, ntree = 500)
print(rf_model)
# Obtain and order variable importance
importance_data <- importance(rf_model, scale = FALSE, type = 1)
importance_df <- data.frame(Variable = rownames(importance_data), Importance = importance_data[,1]) |>
arrange(desc(Importance)) |>
left_join(DataLabel, by = 'Variable') |>
mutate(cluster = cl)
# Plotting the importance of each variable
fig1 <- ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = '#0F7BA2FF') +
geom_hline(yintercept = 0, color = 'black') +
scale_x_discrete(labels = importance_df$text,
breaks = importance_df$Variable) +
coord_flip()+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(title = LETTERS[i+3],
x = NULL, y = "Mean decrease in accuracy")
# Plotting the partial dependence plot
pd_df <- partial_dependence(fit = rf_model,
vars = importance_df$Variable,
data = Data,
n = c(10, 1)) |>
mutate_all(as.numeric) |>
pivot_longer(cols = -prediction,
names_to = 'centile',
values_to = 'value') |>
drop_na() |>
left_join(DataLabel, by = c(centile = 'Variable'))
# Creat the plot
fig2 <- ggplot(pd_df, aes(x = value, y = prediction)) +
geom_line(color = fill_color[3])+
facet_wrap(~text, scale = "free_x") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 4)) +
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(y = "Proportion",
x = NULL)
ggsave(paste0('./Outcome/S fig2_', i[1]+1, '.png'),
fig2,
width = 8,
height = 6,
dpi = 300)
return(fig1)
}
fig_4 <- plot_rf(1)
fig_5 <- plot_rf(2)
fig_6 <- plot_rf(3)
fig1 <- fig_1 + fig_2 + plot_layout(widths = c(1, 2.5))
fig2 <- fig_4 + fig_5 + fig_6 + plot_layout(widths = c(1, 1, 1))
fig <- plot_grid(fig1, fig2, ncol = 1, rel_heights = c(1, 1))
ggsave("./Outcome/fig4.pdf",
fig,
width = 11.5,
height = 7.5,
device = cairo_pdf,
family = "Helvetica")
data <- rbind(fig_4$data, fig_5$data, fig_6$data)
View(data)
write.csv(data, "./Outcome/fig data/fig4.csv", row.names = F)
