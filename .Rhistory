# EU data
data_EU <- read.xlsx('./Data/Pertussis case year age.xlsx', sheet = 'EU', detectDates = T) |>
filter(Distribution == 'Distribution by age' &
!str_detect(RegionCode, 'EU')) |>
select(Time, RegionCode, Category, Value) |>
mutate(RegionCode = case_when(RegionCode == 'UK' ~ 'GB',
RegionCode == 'EL' ~ 'GR',
TRUE ~ RegionCode)) |>
rename(Year = Time,
Country = RegionCode,
Age = Category,
Weight = Value) |>
mutate(Age = case_when(Age == "<1" ~ "00-00",
TRUE ~ Age))
data_EU_all <- read.csv('./Data/ECDC_surveillance_data_Pertussis.csv') |>
select(Time, RegionCode, NumValue) |>
rename(Year = Time,
Country = RegionCode,
CasesAll = NumValue)
data_EU <- data_EU |>
mutate(Weight = as.numeric(Weight)/100,
StartAge = case_when(grepl("-", Age) ~ as.numeric(sub("-.*", "", Age)),
grepl("\\+", Age) ~ as.numeric(sub("\\+.*", "", Age)),
TRUE ~ NA_real_),
EndAge = case_when(grepl("-", Age) ~ as.numeric(sub(".*-", "", Age)),
grepl("\\+", Age) ~ 100,
TRUE ~ NA_real_)) |>
filter(Country != 'GB' & Country != 'FR' & !is.na(Weight) & !str_detect(Country, 'EU')) |>
left_join(data_EU_all, by = c('Year', 'Country')) |>
mutate(Cases = round(Weight * CasesAll))
# find the countries only one group data
data_EU |>
filter(Cases != 0) |>
select(Country, Age) |>
group_by(Country) |>
summarise(Count = length(unique(Age)))
print(paste("EU data has", length(unique(data_EU$Country)), "countries", sep = " "))
print(sort(unique(data_EU$Country)))
# data without EU
country_names <- country_names[country_names != 'EU']
data_other <- lapply(country_names, function(x){
data <- read.xlsx('./Data/Pertussis case year age.xlsx', sheet = x, detectDates = T)
names(data)[1] <- 'Year'
data[is.na(data)] <- 0
data <- data |>
# if exist unknow column, drop it
select(-contains("Unknow")) |>
pivot_longer(cols = -Year, names_to = 'Age', values_to = 'Incidence') |>
mutate(StartAge = case_when(grepl("-", Age) ~ as.numeric(sub("-.*", "", Age)),
grepl("\\+", Age) ~ as.numeric(sub("\\+.*", "", Age)),
TRUE ~ NA_real_),
EndAge = case_when(grepl("-", Age) ~ as.numeric(sub(".*-", "", Age)),
grepl("\\+", Age) ~ 100,
TRUE ~ NA_real_),
Country = x) |>
rowwise() |>
rename(Cases = Incidence) |>
# standardize incidence by each country and year
group_by(Country, Year) |>
mutate(Weight = Cases/sum(Cases),
Weight = case_when(is.na(Weight) ~ 0,
TRUE ~ Weight),
CasesAll = sum(Cases))
return(data)
})
data_other <- do.call(rbind, data_other)
DataRaw <- rbind(data_EU, data_other) |>
mutate(EndAge = case_when(EndAge == 100 ~ 100,
TRUE ~ EndAge +0.9)) |>
filter(Year >= 2010)
remove(data_EU, data_other, data_EU_all)
# print the date range for each country
DataRaw |>
group_by(Country) |>
summarise(Start = min(Year),
End = max(Year),
Case = paste(min(CasesAll), max(CasesAll), sep = '-')) |>
arrange(Start) |>
print(n = Inf)
# Vaccination strategy data
DataVac <- read.csv('./Outcome/S table2.csv')
DataVac <- DataVac |>
select(CODE, NAME, VaccineGeneral, TimeLastShot,
VaccineAdult, VaccineRisk, VaccinePregnant,
CoverageDTP1, CoverageDTP3)
# appendix figure --------------------------------------------------------------------
DataNorm <- DataRaw|>
rowwise() |>
mutate(AgeList = if_else(is.na(StartAge), list(NA_real_), list(seq(StartAge, EndAge)))) |>
unnest(cols = c(AgeList)) |>
filter(!is.na(AgeList)) |>
group_by(Year, Country, AgeList) |>
mutate(AverageCases = Cases / (EndAge - StartAge + 0.1)) |>
ungroup() |>
select(Country, Year, Age = AgeList, AverageCases) |>
group_by(Country, Year) |>
mutate(
Weight = AverageCases / sum(AverageCases),
Weight = case_when(
is.na(Weight) ~ 0,
TRUE ~ Weight
)
) |>
ungroup() |>
group_by(Country, Year) |>
summarise(
Age_Density = list({
dens <- density(Age, weights = Weight, kernel = "epanechnikov", adjust = 0.3, from = 0)
data.frame(Age = dens$x, Density = dens$y)
}),
.groups = 'drop'
) |>
unnest(cols = c(Age_Density))
country_names <- c('AT', 'AU', 'BE', 'BG', 'BR', 'CA', 'CN', 'CY', 'CZ', 'DE',
'DK', 'EE', 'GR', 'ES', 'FI', 'GB', 'HR', 'HU', 'IE',
'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'NZ', 'PL',
'PT', 'RO', 'SE', 'SG', 'SI', 'SK', 'US')
country_labels <- c('Austria', 'Australia', 'Belgium', 'Bulgaria', 'Brazil', 'Canada', 'China', 'Cyprus', 'Czech Republic', 'Germany',
'Denmark', 'Estonia', 'Greece', 'Spain', 'Finland', 'United Kingdom', 'Croatia', 'Hungary', 'Ireland',
'Iceland', 'Italy', 'Lithuania', 'Luxembourg', 'Latvia', 'Malta', 'Netherlands', 'Norway', 'New Zealand', 'Poland',
'Portugal', 'Romania', 'Sweden', 'Singapore', 'Slovenia', 'Slovakia', 'United States')
fill_color <- rev(c("#1E313EFF", "#4E475FFF", "#8B5975FF", "#C86C7CFF", "#FA8975FF"))
DataMedian <- DataNorm |>
group_by(Country) |>
arrange(Age) |>
mutate(cum_weight = cumsum(Density)) |>
summarise(MedianAge = Age[min(which(cum_weight >= sum(Density) / 2))],
.groups = 'drop')
View(DataMedian)
# Load the data
source('./Code/data.R')
remove(list = ls())
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
DataAll <- read.csv("./Outcome/S table2.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
View(DataAll)
unique(DataAll$Income.group)
# Load the data
source('./Code/data.R')
remove(list = ls())
# This script generates Figure 3 in the manuscript.
# To determine the pertussis status in 2022 and 2023,
# we used the median incidence in the pre-epidemic period as the threshold.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table2.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
# find the country not in Map data
# This script generates Figure 3 in the manuscript.
# To determine the pertussis status in 2022 and 2023,
# we used the median incidence in the pre-epidemic period as the threshold.
# packages ----------------------------------------------------------------
library(tidyverse)
library(patchwork)
library(openxlsx)
library(sf)
library(cowplot)
library(paletteer)
library(Cairo)
source('./Code/function.R')
# Data --------------------------------------------------------------------
DataAll <- read.csv("./Outcome/S table2.csv")|>
mutate(
OutbreakSize2022 = factor(OutbreakSize2022, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence')),
OutbreakSize2023 = factor(OutbreakSize2023, levels = c('Unavailable', 'Low', 'Normal', 'High', 'Resurgence'))
)
DataInci <- read.xlsx("./Data/Pertussis incidence.xlsx")[,1:17]|>
filter(!is.na(Disease)) |>
select(-c(Denominator, Disease)) |>
rename(NAME = `Country./.Region`) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence)
)
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
# find the country not in Map data
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataMapPlot <- DataMap |>
left_join(DataAll, by = c('iso_a3' = 'CODE'))
# write csv
data <- DataAll |>
select(WHO_REGION, NAME, CODE,
IncidencePre, IncidencePre25, IncidencePre75, IncidencePreIQR,
Incidence2022, OutbreakSize2022,
Incidence2023, OutbreakSize2023)
write.csv(data, './Outcome/fig data/fig3.csv', row.names = F)
View(DataAll)
# visualize the pertussis incidence and income.group
ggplot(data = DataAll)+
geom_boxplot(aes(x = Income.group, y = IncidencePre, fill = Income.group))
# visualize the pertussis incidence and income.group
ggplot(data = DataAll)+
geom_boxplot(aes(x = Income.group, y = IncidencePre, fill = Income.group))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = 'none')+
labs(x = NULL, y = "Yearly incidence", fill = NULL)
# visualize the pertussis incidence and income.group
ggplot(data = DataAll)+
geom_boxplot(aes(x = Income.group, y = IncidencePre, fill = Income.group))+
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = 'none')+
labs(x = NULL, y = "Average incidence", fill = NULL)
library(ggpubr)
# visualize the pertussis incidence and income.group
ggboxplot(DataAll, x = "Income.Group", y = "IncidencePre",
color = "Income.Group", fill = "Income.Group",
add = "jitter",
ylab = "Incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_minimal()) +
ggtitle("A") +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.Group",
y = "IncidencePre",
color = "Income.Group",
fill = "Income.Group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_minimal()) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
fill = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_minimal()) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_minimal()) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(comparisons = list(c("Low", "Normal"), c("Normal", "High"), c("High", "Resurgence")),
method = "t.test",
label = "p.signif",
hide.ns = T) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(method = "ANOVA",
label = "p.signif",
hide.ns = T) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(label = "p.signif",
hide.ns = T) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(method = "t.test",
label = "p.signif",
hide.ns = T) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group), method = "anova",
label = "p.signif",
hide.ns = T) +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group), method = "anova",
label = "p.signif") +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5))
# visualize the pertussis incidence and income.group
fig <- ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5))
ggsave("./Outcome/fig3_1.pdf",
fig,
width = 6,
height = 4,
device = cairo_pdf)
ggsave("./Outcome/fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
ggsave("./Outcome/S fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
# visualize the pertussis incidence and income.group
fig <- ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
show.legend = F,
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5))
ggsave("./Outcome/S fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
# visualize the pertussis incidence and income.group
fig <- ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
show.legend = T,
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5))
ggsave("./Outcome/S fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
# visualize the pertussis incidence and income.group
fig <- ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5),
lened.position = "none")
ggsave("./Outcome/S fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
# visualize the pertussis incidence and income.group
fig <- ggboxplot(DataAll,
x = "Income.group",
y = "IncidencePre",
color = "Income.group",
add = "jitter",
ylab = "Average incidence in pre-epidemic period",
xlab = "Income group",
ggtheme = theme_bw()) +
stat_compare_means(aes(group = Income.group),
method = "anova") +
theme(plot.title = element_text(hjust = 0.5),
legend.position = "none")
ggsave("./Outcome/S fig3_1.png",
fig,
width = 6,
dpi = 300,
height = 4)
source("D:/OneDrive - work/OneDrive - MSFT/XMU/likangguo/2024/06 pertussis/PertussisVaccine/Code/main.R", echo=TRUE)
