width = 15,
height = 15,
dpi = 300)
# map data ----------------------------------------------------------------
DataMap <- st_read("./Data/world.zh.json") |>
filter(iso_a3  != "ATA")
DataAll[!DataAll$CODE %in% DataMap$iso_a3, 'NAME']
DataCountry <- read.csv('./Data/GBD/iso_code.csv') |>
select(-location_name)
DataInciRaw <- read.csv("./Data/GBD/IHME-GBD_2021_DATA-47cdfc04-1.csv") |>
select(location_id, year, val) |>
left_join(DataCountry, by = c('location_id'))
DataInciRaw <- DataInciRaw |>
rename(NAME = ISO3) |>
select(NAME, year, val) |>
pivot_wider(names_from = year, values_from = val) |>
mutate(across('2019':'2010', ~as.numeric(.)))
DataInciRaw |>
select(NAME, `2019`:`2010`) |>
pivot_longer(cols = `2019`:`2010`, names_to = 'Year', values_to = 'Incidence') |>
group_by(NAME) |>
summarise(Incidence = median(Incidence, na.rm = T)) |>
arrange(desc(Incidence)) |>
head(10) |>
as.data.frame()
# incidence cluster -------------------------------------------------------
set.seed(20240521)
fill_color_disease <- rev(c('#DD5129FF', '#FAB255FF', '#0F7BA2FF', '#43B284FF' ))
DataInci <- DataInciRaw |>
select('2019':'2010') |>
as.data.frame()
names(DataInci) <- paste0("X", names(DataInci))
rownames(DataInci) <- DataInciRaw$NAME
# random forest imputation
DataMatInci <-DataInci|>
log() |>
as.matrix()
rownames(DataMatInci) <- DataInciRaw$NAME
# hierarchical clustering
hcdata <- scale(DataMatInci) |>
hkmeans(3)
DataCluster <- hcdata$cluster |>
as.data.frame() |>
mutate(Cluster = as.factor(hcdata$cluster),
ClusterG = fct_recode(Cluster, 'Low' = '3', 'Moderate' = '2', 'High' = '1'),
ClusterG = factor(ClusterG, levels = c('Low', 'Moderate', 'High'))) |>
select(Cluster, ClusterG) |>
rownames_to_column('NAME')
DataAll <- DataAll |>
left_join(DataCluster, by = c('CODE' = 'NAME'))
# merge data
DataInci$NAME <- rownames(DataInci)
DataCluster <- DataCluster|>
left_join(DataInci, by = c('NAME')) |>
pivot_longer(cols = -c(NAME, Cluster, ClusterG), names_to = 'Year', values_to = 'Incidence') |>
mutate(Year = as.numeric(gsub('X', '', Year)))
DataCluster |>
group_by(Cluster, ClusterG) |>
summarise(Incidence = mean(Incidence, na.rm = T))
# panel a -----------------------------------------------------------------
table(hcdata$cluster)
fig_1 <- fviz_cluster(hcdata,
data = scale(DataMatInci),
# geom = 'point',
palette = c("#DD5129FF", "#FAB255FF", "#43B284FF"),
ggtheme = theme_bw(),
main = 'A')+
theme(legend.position = 'none',
plot.title.position = 'plot')
write.csv(DataAll, "./Outcome/S table2.csv", row.names = F)
# panel b -----------------------------------------------------------------
DataMapPlot <- DataMap |>
left_join(DataAll[,c('CODE', 'ClusterG')], by = c('iso_a3' = 'CODE'))
table(DataAll$ClusterG)
fill_color <- rev(c('#DD5129FF', '#FAB255FF', '#43B284FF'))
fig_2_m <- plot_map_col(DataAll$ClusterG, fill_color) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$ClusterG),
limits = levels(DataAll$ClusterG))+
scale_x_discrete(limits = levels(DataAll$ClusterG))+
labs(title = 'Disease burden')
fig_2 <- ggplot(data = DataMapPlot) +
geom_sf(aes(fill = ClusterG)) +
# add x, y tick labels
theme(axis.text.x = element_text(size = 8),
axis.text.y = element_text(size = 8)) +
scale_x_continuous(limits = c(-180, 180),
expand = c(0, 0)) +
scale_y_continuous(limits = c(-60, 75)) +
scale_fill_manual(values = fill_color,
breaks = levels(DataAll$ClusterG),
limits = levels(DataAll$ClusterG),
na.translate = F)+
theme_bw() +
theme(panel.grid = element_blank(),
panel.background = element_rect(fill = "#C1CDCD", color = NA),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
legend.position = 'none',
plot.title.position = 'plot') +
labs(title = "B", x = NULL, y = NULL, fill = 'Disease burden')+
guides(fill = guide_legend(nrow = 1))
fig_2 <- fig_2 + inset_element(fig_2_m, left = 0.01, bottom = 0.01, right = 0.25, top = 0.55)
# panel d -----------------------------------------------------------------
DataLabel <- data.frame(
Variable = c("CoverageDTP1", "CoverageDTP3",
"VaccinePregnant", "VaccineAdult", "VaccineRisk",
'VaccineAP, VaccineWP',
"TimeLastShot", "TimeFirstShot",
"VaccineAP", "VaccineWP"),
text = c("DTP1 coverage", "DTP3 coverage",
"Maternal immunization", "Vaccine for adult", "Vaccine for risk",
"aP vaccine, wP vaccine",
"Time of last shot", "Time of first shot",
"aP vaccine", "wP vaccine")
)
plot_rf <- function(i){
# Filter data for the specific cluster
cl <- levels(DataAll$Cluster)[i]
print(paste0('########## Cluster ', cl, ' ##########'))
Data <- DataAll |>
filter(Cluster %in% cl)  |>
select(CoverageDTP1:VaccineCode, VaccineAP, VaccineWP, OutbreakSize)  |>
mutate(
VaccineAP = as.numeric(VaccineAP == 'TRUE'),
VaccineWP = as.numeric(VaccineWP == 'TRUE')
)  |>
mutate_at(vars(VaccinePregnant, VaccineAdult, VaccineRisk, VaccineAP, VaccineWP), as.character) |>
filter(!is.na(OutbreakSize) & !is.infinite(OutbreakSize))  |>
select(-c(VaccineCode)) |>
na.omit()
# Prepare the model matrix
y <- Data$OutbreakSize
x <- Data |> select(-OutbreakSize)
# Fit random forest model
set.seed(20250218)
rf_model <- randomForest(x, y, importance = TRUE, ntree = 500)
print(rf_model)
# Obtain and order variable importance
importance_data <- importance(rf_model, scale = FALSE, type = 1)
importance_df <- data.frame(Variable = rownames(importance_data), Importance = importance_data[,1]) |>
arrange(desc(Importance)) |>
left_join(DataLabel, by = 'Variable') |>
mutate(cluster = cl)
# Plotting the importance of each variable
fig1 <- ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = '#0F7BA2FF') +
geom_hline(yintercept = 0, color = 'black') +
scale_x_discrete(labels = importance_df$text,
breaks = importance_df$Variable) +
coord_flip()+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(title = LETTERS[i+2],
x = NULL, y = "Mean decrease in accuracy")
# Plotting the partial dependence plot
pd_df <- partial_dependence(fit = rf_model,
vars = importance_df$Variable,
data = Data,
n = c(10, 1)) |>
mutate_all(as.numeric) |>
pivot_longer(cols = -prediction,
names_to = 'centile',
values_to = 'value') |>
drop_na() |>
left_join(DataLabel, by = c(centile = 'Variable')) |>
mutate(cluster = cl)
# Creat the plot
fig2 <- ggplot(pd_df, aes(x = value, y = prediction)) +
geom_line(color = fill_color[3])+
facet_wrap(~text, scale = "free_x") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 4)) +
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(y = "Proportion",
x = NULL)
ggsave(paste0('./Outcome/S fig4_', i[1]+1, '.png'),
fig2,
width = 8,
height = 6,
dpi = 300)
write.csv(pd_df, paste0('./Outcome/S table4_', i[1], '.csv'), row.names = F)
return(fig1)
}
fig_4 <- plot_rf(1)
fig_5 <- plot_rf(2)
fig_6 <- plot_rf(3)
fig1 <- fig_1 + fig_2 + plot_layout(widths = c(1, 2.5))
fig2 <- fig_4 + fig_5 + fig_6 + plot_layout(widths = c(1, 1, 1))
fig <- plot_grid(fig1, fig2, ncol = 1, rel_heights = c(1, 1))
ggsave("./Outcome/fig4.pdf",
fig,
width = 11.5,
height = 7.5,
device = cairo_pdf,
family = "Helvetica")
fig_1 <- fviz_cluster(hcdata,
data = scale(DataMatInci),
geom = 'point',
palette = c("#DD5129FF", "#FAB255FF", "#43B284FF"),
ggtheme = theme_bw(),
main = 'A')+
theme(legend.position = 'none',
plot.title.position = 'plot')
fig1 <- fig_1 + fig_2 + plot_layout(widths = c(1, 2.5))
fig2 <- fig_4 + fig_5 + fig_6 + plot_layout(widths = c(1, 1, 1))
fig <- plot_grid(fig1, fig2, ncol = 1, rel_heights = c(1, 1))
ggsave("./Outcome/fig4.pdf",
fig,
width = 11.5,
height = 7.5,
device = cairo_pdf,
family = "Helvetica")
levels(DataAll$Cluster)
levels(DataAll$ClusterG)
plot_rf <- function(i){
# Filter data for the specific cluster
cl <- levels(DataAll$ClusterG)[i]
print(paste0('########## Cluster ', cl, ' ##########'))
Data <- DataAll |>
filter(ClusterG %in% cl)  |>
select(CoverageDTP1:VaccineCode, VaccineAP, VaccineWP, OutbreakSize)  |>
mutate(
VaccineAP = as.numeric(VaccineAP == 'TRUE'),
VaccineWP = as.numeric(VaccineWP == 'TRUE')
)  |>
mutate_at(vars(VaccinePregnant, VaccineAdult, VaccineRisk, VaccineAP, VaccineWP), as.character) |>
filter(!is.na(OutbreakSize) & !is.infinite(OutbreakSize))  |>
select(-c(VaccineCode)) |>
na.omit()
# Prepare the model matrix
y <- Data$OutbreakSize
x <- Data |> select(-OutbreakSize)
# Fit random forest model
set.seed(20250218)
rf_model <- randomForest(x, y, importance = TRUE, ntree = 500)
print(rf_model)
# Obtain and order variable importance
importance_data <- importance(rf_model, scale = FALSE, type = 1)
importance_df <- data.frame(Variable = rownames(importance_data), Importance = importance_data[,1]) |>
arrange(desc(Importance)) |>
left_join(DataLabel, by = 'Variable') |>
mutate(cluster = cl)
# Plotting the importance of each variable
fig1 <- ggplot(importance_df, aes(x = reorder(Variable, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = '#0F7BA2FF') +
geom_hline(yintercept = 0, color = 'black') +
scale_x_discrete(labels = importance_df$text,
breaks = importance_df$Variable) +
coord_flip()+
theme_bw() +
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(title = LETTERS[i+2],
x = NULL, y = "Mean decrease in accuracy")
# Plotting the partial dependence plot
pd_df <- partial_dependence(fit = rf_model,
vars = importance_df$Variable,
data = Data,
n = c(10, 1)) |>
mutate_all(as.numeric) |>
pivot_longer(cols = -prediction,
names_to = 'centile',
values_to = 'value') |>
drop_na() |>
left_join(DataLabel, by = c(centile = 'Variable')) |>
mutate(cluster = cl)
# Creat the plot
fig2 <- ggplot(pd_df, aes(x = value, y = prediction)) +
geom_line(color = fill_color[3])+
facet_wrap(~text, scale = "free_x") +
scale_y_continuous(breaks = scales::pretty_breaks(n = 4)) +
theme_bw()+
theme(panel.grid = element_blank(),
axis.text = element_text(color = 'black', face = 'plain'),
axis.title = element_text(color = 'black', face = 'plain'),
plot.title.position = 'plot') +
labs(y = "Proportion",
x = NULL)
ggsave(paste0('./Outcome/S fig4_', i[1]+1, '.png'),
fig2,
width = 8,
height = 6,
dpi = 300)
write.csv(pd_df, paste0('./Outcome/S table4_', i[1], '.csv'), row.names = F)
return(fig1)
}
fig_4 <- plot_rf(1)
fig_5 <- plot_rf(2)
fig_6 <- plot_rf(3)
fig1 <- fig_1 + fig_2 + plot_layout(widths = c(1, 2.5))
fig2 <- fig_4 + fig_5 + fig_6 + plot_layout(widths = c(1, 1, 1))
fig <- plot_grid(fig1, fig2, ncol = 1, rel_heights = c(1, 1))
ggsave("./Outcome/fig4.pdf",
fig,
width = 11.5,
height = 7.5,
device = cairo_pdf,
family = "Helvetica")
data <- rbind(fig_4$data, fig_5$data, fig_6$data)
write.csv(data, "./Outcome/fig data/fig4.csv", row.names = F)
data <- map(1:3, ~read.csv(paste0('./Outcome/S table4_', .x, '.csv')))
data <- bind_rows(data, .id = 'Cluster')
write.csv(data, "./Outcome/S table4.csv", row.names = F)
# remove the temporary files
file.remove(paste0('./Outcome/S table4_', 1:3, '.csv'))
View(DataCluster)
View(DataAll)
Sys.setlocale("LC_TIME", "English")
# packages ----------------------------------------------------------------
library(tidyverse)
library(openxlsx)
library(lubridate)
library(jsonlite)
source('./Code/function.R')
# Data --------------------------------------------------------------------
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/diphtheria-tetanus-toxoid-and-pertussis-(dtp)-vaccination-coverage?ANTIGEN=&YEAR=&CODE=
## Diphtheria tetanus toxoid and pertussis (DTP) vaccination coverage
## These data represent administrative and official Diphtheria Tetanus Toxoid and Pertussis (DTP) vaccination coverage reported annually through the WHO/UNICEF Joint Reporting Form on Immunization (JRF). Data is updated as country data is received.
## WHO/UNICEF Estimates of National Immunization Coverage (WUENIC) are also displayed here. National, regional, and global data are updated annually mid-July.
DataVacCover <- read.xlsx("./Data/DTP vaccination coverage.xlsx")
DataVacCover <- DataVacCover |>
filter(COVERAGE_CATEGORY == 'WUENIC' & GROUP == 'COUNTRIES') |>
select(CODE, NAME, ANTIGEN, COVERAGE, YEAR) |>
group_by(CODE, NAME, ANTIGEN) |>
mutate(MAX_YEAR = max(YEAR)) |>
filter(YEAR == MAX_YEAR) |>
summarise(
COVERAGE = max(COVERAGE),
MAX_YEAR = max(YEAR),
.groups = 'drop'
) |>
pivot_wider(names_from = ANTIGEN, values_from = COVERAGE) |>
select(-MAX_YEAR) |>
rename(CoverageDTP3 = DTPCV3,
CoverageDTP1 = DTPCV1)
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/vaccination-schedule-for-pertussis?ISO_3_CODE=&TARGETPOP_GENERAL=
## Vaccination schedule for Pertussis
## The vaccine scheduler table summarizes the current vaccination schedule for young children, adolescents, and adults for Pertussis. The data is updated regularly with the most recent official country reporting collected through the WHO/UNICEF joint reporting process.
DataVacScheduleRaw <- read.xlsx("./Data/Vaccination schedule for Pertussis 2025-21-01 12-27 UTC.xlsx") |>
filter(!is.na(COUNTRYNAME))
DataInfo <- DataVacScheduleRaw |>
select(ISO_3_CODE, COUNTRYNAME, WHO_REGION) |>
unique() |>
rename(CODE = ISO_3_CODE, NAME = COUNTRYNAME)
DataVacSchedule <- DataVacScheduleRaw |>
select(ISO_3_CODE, COUNTRYNAME, VACCINECODE, SCHEDULEROUNDS, TARGETPOP_DESCRIPTION, TARGETPOP,
AGEADMINISTERED, VACCINEDESCRIPTIONSHORT, YEAR, SCHEDULERCODE) |>
rename(CODE = ISO_3_CODE, NAME = COUNTRYNAME)
# Use wP vaccine
DataVacWP <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('General/routine', 'Catch-up children')) |>
select(CODE, NAME, SCHEDULERCODE) |>
unique() |>
mutate(A = T) |>
pivot_wider(names_from = SCHEDULERCODE, values_from = A) |>
mutate(VaccineCode = case_when(
aP & wP ~ 'Both',
aP ~ 'aP',
wP ~ 'wP',
TRUE ~ 'Unknown'
),
VaccineCode = factor(VaccineCode, levels = c('wP', 'aP', 'Both', 'Unknown'))) |>
select(CODE, NAME, VaccineCode)
# Adult
DataVacScheduleAdult <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% 'Adults') |>
select(CODE, NAME, SCHEDULEROUNDS) |>
unique() |>
group_by(CODE, NAME) |>
summarise(ADULT = 1,
.groups = 'drop')
# "Risk group(s)" or "Health workers"
DataVacScheduleRisk <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('Risk group(s)', "Health workers")) |>
select(CODE, NAME, SCHEDULEROUNDS) |>
unique() |>
group_by(CODE, NAME) |>
summarise(RISK = 1,
.groups = 'drop')
# Pregnant women
DataAddition <- read.xlsx("./Data/Maternal pertussis immunization 2021.xlsx") |>
filter(!is.na(DISEASE)) |>
select(COUNTRYNAME) |>
rename(NAME = COUNTRYNAME) |>
## add CODE for the countries
left_join(DataInfo, by = c('NAME')) |>
select(CODE, NAME)
DataVacSchedulePreg <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION == 'Pregnant women') |>
select(CODE, NAME) |>
# rbind with the data from the additional file
rbind(DataAddition) |>
unique() |>
group_by(CODE, NAME) |>
summarise(PREGNANT = 1,
.groups = 'drop')
# General/routine
DataVacScheduleGenM <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('General/routine'),
# filter AGEADMINISTERED contains M or W
str_detect(AGEADMINISTERED, '[MМ]|W')) |>
select(CODE, NAME, SCHEDULEROUNDS, AGEADMINISTERED, TARGETPOP) |>
unique() |>
mutate(SCHEDULEROUNDS = paste(SCHEDULEROUNDS, TARGETPOP, sep = '_')) |>
group_by(CODE, NAME) |>
summarise(GENERALM = length(unique(SCHEDULEROUNDS)),
.groups = 'keep') |>
select(CODE, NAME, GENERALM)
DataVacScheduleGenY <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('General/routine'),
# filter AGEADMINISTERED contains Y
str_detect(AGEADMINISTERED, 'Y')) |>
select(CODE, NAME, SCHEDULEROUNDS, AGEADMINISTERED, TARGETPOP) |>
unique() |>
mutate(SCHEDULEROUNDS = paste(SCHEDULEROUNDS, TARGETPOP)) |>
group_by(CODE, NAME) |>
summarise(GENERALY = length(unique(SCHEDULEROUNDS)),
.groups = 'keep') |>
select(CODE, NAME, GENERALY)
DataVacScheduleGen <- DataVacSchedule |>
filter(TARGETPOP_DESCRIPTION %in% c('General/routine')) |>
group_by(CODE, NAME) |>
summarise(GENERALLASTSHOT = max(process_date_column(unique(AGEADMINISTERED), 'max')),
GENERALFIRSTSHOT = min(process_date_column(unique(AGEADMINISTERED), 'min')),
.groups = 'drop') |>
# left_join(DataVacScheduleGenM, by = c('CODE', 'NAME')) |>
# left_join(DataVacScheduleGenY, by = c('CODE', 'NAME')) |>
# mutate(GENERALY = replace_na(GENERALY, 0),
#        GENERAL = GENERALM + GENERALY) |>
arrange(CODE)
DataVacSchedule <- DataVacSchedule |>
select(CODE, NAME) |>
unique() |>
full_join(DataVacSchedulePreg, by = c('CODE', 'NAME')) |>
mutate(PREGNANT = replace_na(PREGNANT, 0)) |>
full_join(DataVacScheduleAdult, by = c('CODE', 'NAME')) |>
mutate(ADULT = replace_na(ADULT, 0)) |>
full_join(DataVacScheduleRisk, by = c('CODE', 'NAME')) |>
mutate(RISK = replace_na(RISK, 0)) |>
full_join(DataVacScheduleGen, by = c('CODE', 'NAME')) |>
rename(TimeFirstShot = GENERALFIRSTSHOT,
TimeLastShot = GENERALLASTSHOT,
VaccinePregnant = PREGNANT,
# VaccineGeneral = GENERAL,
VaccineAdult = ADULT,
VaccineRisk = RISK)
remove(DataVacSchedulePreg, DataVacScheduleAdult, DataVacScheduleRisk,
DataVacScheduleGen, DataVacScheduleGenM, DataVacScheduleGenY)
## Data from the World Health Organization (WHO)
## Merge all data
DataVac <- DataVacCover |>
merge(DataVacSchedule, by = c('CODE', 'NAME'), all = T) |>
merge(DataVacWP, by = c('CODE', 'NAME'), all = T)
## Data from the World Health Organization (WHO)
## https://immunizationdata.who.int/global/wiise-detail-page/pertussis-reported-cases-and-incidence
## Pertussis incidence after 2010
DataInci <- read.xlsx("./Data/Pertussis reported cases and incidence 2025-12-02 17-37 UTC.xlsx")[,1:17]
DataInci <- DataInci |>
filter(!is.na(Disease)) |>
select(-c(Disease)) |>
rename(NAME = `Country./.Region`) |>
filter(NAME %in% DataVac$NAME) |>
pivot_longer(cols = -c(NAME),
names_to = 'YEAR',
values_to = 'Incidence') |>
mutate(Period = case_when(
YEAR <= 2019 ~ 'Pre-epidemic',
YEAR <= 2021 ~ 'Epidemic',
YEAR == 2022 ~ '2022',
YEAR == 2023 ~ '2023'),
Period = factor(Period, levels = c('Pre-epidemic', 'Epidemic', '2023', '2022')),
Incidence = as.numeric(Incidence),
Incidence = if_else(is.na(Incidence), Incidence, Incidence + 0.001)
) |>
group_by(NAME, Period) |>
summarise(Incidence_50 = median(Incidence, na.rm = T),
Incidence_25 = quantile(Incidence, 0.25, na.rm = T),
Incidence_75 = quantile(Incidence, 0.75, na.rm = T),
IQR = Incidence_75 - Incidence_25,
.groups = 'drop') |>
pivot_wider(names_from = Period,
values_from = c(Incidence_50, Incidence_25, Incidence_75, IQR),
names_glue = "{Period}_{.value}") |>
select(NAME,
`Pre-epidemic_Incidence_50`, `Pre-epidemic_Incidence_25`, `Pre-epidemic_Incidence_75`, `Pre-epidemic_IQR`,
`2022_Incidence_50`, `2023_Incidence_50`) |>
rename(`2022` = `2022_Incidence_50`,
`2023` = `2023_Incidence_50`)
View(DataInci)
DataInci <- read.xlsx("./Data/Pertussis reported cases and incidence 2025-12-02 17-37 UTC.xlsx")[,1:17]
DataInci <- DataInci |>
filter(!is.na(Disease)) |>
select(-c(Disease)) |>
rename(NAME = `Country./.Region`)
View(DataInci)
DataInci <- read.xlsx("./Data/Pertussis reported cases and incidence 2025-12-02 17-37 UTC.xlsx")[,1:17]
DataInci <- DataInci |>
filter(!is.na(Disease)) |>
select(-c(Disease)) |>
rename(NAME = `Country./.Region`) |>
filter(!NAME %in% DataVac$NAME)
