return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(round(outcome$p.value, 4))
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$binary_test_p_value = outcome
results_df
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(outcome$p.value)
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$binary_test_p_value = outcome
results_df
View(outcome)
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(as.numeric(outcome$p.value))
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$binary_test_p_value = round(outcome, 4)
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(outcome$p.value)
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$binary_test_p_value = round(as.numeric(outcome), 4)
results_df
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(outcome$p.value)
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$binary_test_p_value = round(as.numeric(outcome), 3)
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(outcome$p.value)
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$observations = c('derived from deterministic pattern', 'random', 'random', 'random', 'derived from deterministic pattern', 'random')
results_df$binary_test_p_value = round(as.numeric(outcome), 3)
results_df
# describe the distribution of the number of heads in a sequence of flips
describe_flips = function(flips) {
flips = split(flips)
n_heads = sum(flips == "H")
n_tails = sum(flips == "T")
return(c(n_heads, n_tails))
}
results = lapply(list(flips1, flips2, flips3, flips4, flips5, flips6), describe_flips)
results_df = as.data.frame(do.call(rbind, results))
colnames(results_df) = c("n_heads", "n_tails")
# add names to the results
results_df$sequence = c("flips1", "flips2", "flips3", "flips4", "flips5", "flips6")
# reorder the columns
results_df = results_df[, c(3, 1, 2)]
# Binary test for the proportion of heads
binary_test = function(result) {
n_heads = result[1]
n_tails = result[2]
n = n_heads + n_tails
outcome = binom.test(n_heads, n, p=0.5)
return(outcome$p.value)
}
# run test for random flips
outcome = lapply(results, binary_test)
results_df$observations = c('pattern', 'random', 'random', 'random', 'pattern', 'random')
results_df$binary_test_p_value = round(as.numeric(outcome), 3)
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
print(table_pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
print(table_pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# add missing pairs
all_pairs = c("HH", "HT", "TH", "TT")
table_pairs = table_pairs[all_pairs]
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# add missing pairs
all_pairs = c("HH", "HT", "TH", "TT")
table_pairs = table_pairs[all_pairs]
print(table_pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# add missing pairs, replace missing values with 0
all_pairs = c("HH", "HT", "TH", "TT")
table_pairs = table_pairs[all_pairs]
table_pairs = replace(table_pairs, is.na(table_pairs), 0)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# add missing pairs, replace missing values with 0
all_pairs = c("HH", "HT", "TH", "TT")
table_pairs = table_pairs[all_pairs]
table_pairs = replace(table_pairs, is.na(table_pairs), 0)
print(table_pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
pairwise_test = function(flips) {
flips = split(flips)
pairs = paste0(flips[-length(flips)], flips[-1])
table_pairs = table(pairs)
# add missing pairs, replace missing values with 0
all_pairs = c("HH", "HT", "TH", "TT")
factor_pairs = factor(pairs, levels = all_pairs)
table_pairs = table(factor_pairs)
table_pairs = as.numeric(table_pairs)
names(table_pairs) = all_pairs
print(table_pairs)
# Chi-squared test
test = chisq.test(table_pairs)
return(round(test$p.value, 4))
}
# Apply pairwise chi-square test
pairwise_test_p_values = sapply(list(flips1, flips2, flips3, flips4, flips5, flips6), pairwise_test)
results_df$pairwise_test_p_value = pairwise_test_p_values
results_df
# calculate the significance level for Decision Rule 1
alpha = 0.05
# calculate the probability of getting no tails in N flips for the fair coin
N <- 1
while ((0.5)^N >= alpha) {
N <- N + 1
}
cat("The smallest N for which the significance level is less than 5% is N =", N, "\n")
# calculate the power of the test
power = 1 - (0.5)^N
cat("The power of the test is", power, "\n")
# calculate the significance level for Decision Rule 2
N = 4
# calculate the probability of getting no tails in N flips for the fair coin
alpha = (0.5)^N
cat("The significance level for Decision Rule 2 is", alpha, "\n")
N = 4
alpha = (0.5)^N
cat("The significance level for Decision Rule 2 is", alpha, "\n")
probs_all_heads = 0.5^N
probs_all_tails = 0.5^N
alpha = probs_all_heads + probs_all_tails
cat("The significance level for Decision Rule 2 is", alpha, "\n")
N = 4
alpha = (0.5)^N
cat("The significance level for Decision Rule 2 is", \n")
N = 4
alpha = (0.5)^N
cat("The significance level for Decision Rule 2 is", alpha, "\n")
X <- read.csv("uniform_sample.csv")$x
test_statistic = max(X)
cat("The test statistic is", test_statistic, "\n")
set.seed(123)  # Set seed for reproducibility
n_simulations <- 1000
n_sample <- length(X)
# Simulate maxima under H0: Uniform(0, 1)
simulated_maxima <- replicate(n_simulations, max(runif(n_sample, min = 0, max = 1)))
# Plot histogram of the simulated maxima
hist(simulated_maxima, breaks = 30, col = "skyblue", main = "Distribution of Maximum Statistic under H0", xlab = "Maximum Value", border = "black")
set.seed(123)  # Set seed for reproducibility
n_simulations <- 1000
n_sample <- length(X)
# Simulate maxima under H0: Uniform(0, 1)
simulated_maxima <- replicate(n_simulations, max(runif(n_sample, min = 0, max = 1)))
# Plot histogram of the simulated maxima
hist(simulated_maxima, breaks = 30,
col = "red",
xlab = "Maximum Value",
border = "black")
set.seed(123)  # For reproducibility
simulations <- replicate(1000, max(runif(50, 0, 1)))
# Plotting the histogram
hist(simulations, breaks=30, main="Histogram of Maxima under H0",
xlab="Maximum Value", col="skyblue", border="black")
set.seed(123)  # For reproducibility
simulations <- replicate(1000, max(runif(50, 0, 1)))
# Plotting the histogram
hist(simulations,
breaks=30,
xlab="Maximum Value",)
max(runif(50, 0, 1))
runif(50, 0, 1)
set.seed(123)  # For reproducibility
simulations <- replicate(1000, max(runif(50, 0, 1)))
# Plotting the histogram
hist(simulations,
breaks=30,
xlab="Maximum Value",)
observed_max <- max(X)
p_value <- mean(simulations >= observed_max) + mean(simulations <= 1 - observed_max)
cat("The p-value is", p_value, "\n")
p_value <- 2 * min(mean(simulations >= observed_max), mean(simulations <= observed_max))
observed_max <- max(X)
p_value <- 2 * min(mean(simulations >= observed_max), mean(simulations <= observed_max))
cat("The p-value is", p_value, "\n")
observed_max <- max(X)
p_value <- mean(simulated_maxima >= T_obs | simulated_maxima <= (1 - (T_obs - 1)))
observed_max <- max(X)
p_value <- mean(simulated_maxima >= observed_max | simulated_maxima <= (1 - (observed_max - 1)))
cat("The p-value is", p_value, "\n")
observed_max <- max(X)
p_value <- 2 * min(mean(simulated_maxima >= observed_max), mean(simulated_maxima <= observed_max))
cat("The p-value is", p_value, "\n")
n_simulations <- 1000
correlation_coefficients <- replicate(n_simulations, {
shuffled_blurtle <- blurtle %>%
mutate(day = sample(day))
cor(shuffled_blurtle$day, shuffled_blurtle$tries)
})
blurtle <- read.csv("blurtle.csv")
n_simulations <- 1000
correlation_coefficients <- replicate(n_simulations, {
shuffled_blurtle <- blurtle %>%
mutate(day = sample(day))
cor(shuffled_blurtle$day, shuffled_blurtle$tries)
})
# Plotting the histogram
hist(correlation_coefficients,
breaks=30,
xlab="Correlation Coefficient")
shuffled_blurtle <- blurtle |>
mutate(day = sample(day))
View(shuffled_blurtle)
View(blurtle)
View(shuffled_blurtle)
n_simulations <- 1000
correlation_coefficients <- replicate(n_simulations, {
shuffled_blurtle <- blurtle |>
mutate(day = sample(day))
cor(shuffled_blurtle$day, shuffled_blurtle$tries)
})
# Plotting the histogram
hist(correlation_coefficients,
breaks=30,
xlab="Correlation Coefficient")
p_value <- mean(correlation_coefficients <= cor(blurtle$day, blurtle$tries))
cat("The p-value is", p_value, "\n")
cor(blurtle$day, blurtle$tries)
p_value <- mean(correlation_coefficients <= cor(blurtle$day, blurtle$tries))
cat("The p-value is", p_value, "\n")
View(blurtle)
blurtle <- read.csv("blurtle.csv")
n_simulations <- 1000
correlation_coefficients <- replicate(n_simulations, {
shuffled_blurtle <- blurtle |>
mutate(day = sample(day))
cor(shuffled_blurtle$day, shuffled_blurtle$tries)
})
# Plotting the histogram
hist(correlation_coefficients,
breaks=30,
xlab="Correlation Coefficient")
coef(lm(tries ~ day, data=blurtle))[2]
n_simulations <- 1000
tries <- blurtle$Tries
days <- blurtle$day
# Step 1: Compute the original test statistic (correlation)
observed_correlation <- cor(days, tries)
n_simulations <- 1000
tries <- blurtle$Tries
days <- blurtle$day
# Step 1: Compute the original test statistic (correlation)
observed_correlation <- cor(days, tries)
days
tries
tries <- blurtle$tries
days <- blurtle$day
# Step 1: Compute the original test statistic (correlation)
observed_correlation <- cor(days, tries)
observed_correlation
# Step 1: Compute the original test statistic (correlation)
observed_correlation <- cor(days, tries)
# Step 2: Set up the permutation test
set.seed(123)  # For reproducibility
n_permutations <- 10000
permuted_correlations <- numeric(n_permutations)
# Step 3: Generate permuted correlations
for (i in 1:n_permutations) {
shuffled_tries <- sample(tries)  # Shuffle the number of tries
permuted_correlations[i] <- cor(days, shuffled_tries)
}
# Step 4: Compute the p-value
p_value <- mean(permuted_correlations <= observed_correlation)
p_value
# Step 4: Histogram of permuted correlations
hist(permuted_correlations, breaks=30, xlab="Correlation Coefficient", main="Permutation Test")
n_simulations <- 1000
tries <- blurtle$tries
days <- blurtle$day
# Step 1: Compute the original test statistic (correlation)
observed_correlation <- cor(days, tries)
# Step 2: Set up the permutation test
set.seed(123)
n_permutations <- 10000
permuted_correlations <- numeric(n_permutations)
# Step 3: Generate permuted correlations
for (i in 1:n_permutations) {
shuffled_tries <- sample(tries)  # Shuffle the number of tries
permuted_correlations[i] <- cor(days, shuffled_tries)
}
# Step 4: Histogram of permuted correlations
hist(permuted_correlations, breaks=30, xlab="Correlation Coefficient", main="Permutation Test")
p_value <- mean(permuted_correlations <= observed_correlation)
cat("The p-value is", p_value, "\n")
p_value <- mean(permuted_correlations <= observed_correlation)
cat("Observed correlation is ", observed_correlation, "and the p-value is ", p_value, "\n")
1394.6+520
1394.6+520
2420-1914.6
50000-48603.6
975.33-505
520+1394+505.4
520+1394+505.4+0.6
